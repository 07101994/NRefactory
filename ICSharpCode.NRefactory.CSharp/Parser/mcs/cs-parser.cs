// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011 Xamarin Inc.
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		UsingsBag ubag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation, savedLocation, savedOpenLocation, savedCloseLocation;
		Location savedAttrParenOpenLocation, savedAttrParenCloseLocation, savedOperatorLocation;
		Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		List<Location> attributeCommas = new List<Location> ();
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
		List<Location> enumCommas = new List<Location> ();
		
		object lastYYVal;
		
		// Can be used for code completion to get the last valid expression before an error.
		// needs a hack in yyparse to make it work add 
		// lastYYVal = yyVal;
		// after the big switch/case (somewhere around line 3915)
		public object LastYYVal {
			get {
				return lastYYVal;
			}
		}
		
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$2 :",
//t    "$$3 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_or_type_declarations :",
//t    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
//t    "namespace_or_type_declarations : namespace_or_type_declaration",
//t    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
//t    "namespace_or_type_declaration : type_declaration",
//t    "namespace_or_type_declaration : namespace_declaration",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "$$24 :",
//t    "$$25 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$23 method_declaration_name OPEN_PARENS $$24 opt_formal_parameter_list CLOSE_PARENS $$25 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$26 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$26 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$27 OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "$$30 :",
//t    "$$31 :",
//t    "$$32 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$30 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$31 accessor_declarations $$32 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$33 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
//t    "$$34 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$35 :",
//t    "$$36 :",
//t    "$$37 :",
//t    "$$38 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$39 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$40 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$41 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$42 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$43 :",
//t    "$$44 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$45 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
//t    "$$46 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : error",
//t    "$$47 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$48 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$49 :",
//t    "$$50 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$49 event_accessor_declarations $$50 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$51 :",
//t    "opt_event_initializer : ASSIGN $$51 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$52 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$52 event_variable_initializer",
//t    "$$53 :",
//t    "event_variable_initializer : $$53 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$54 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$54 event_accessor_block",
//t    "$$55 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$55 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "$$56 :",
//t    "$$57 :",
//t    "$$58 :",
//t    "$$59 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM $$56 type_declaration_name opt_enum_base $$57 OPEN_BRACE $$58 opt_enum_member_declarations $$59 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$60 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$60 ASSIGN constant_expression",
//t    "$$61 :",
//t    "$$62 :",
//t    "$$63 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$61 opt_formal_parameter_list CLOSE_PARENS $$62 opt_type_parameter_constraints_clauses $$63 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$64 :",
//t    "type_declaration_name : IDENTIFIER $$64 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : namespace_or_type_name pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$65 :",
//t    "new_expr_type : $$65 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$66 :",
//t    "typeof_expression : TYPEOF $$66 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$67 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$67 block",
//t    "$$68 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$68 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$69 :",
//t    "anonymous_method_signature : OPEN_PARENS $$69 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "expression_recover : expression",
//t    "expression_recover : error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression_recover",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$70 :",
//t    "lambda_expression_body_simple : $$70 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$71 :",
//t    "lambda_expression : IDENTIFIER ARROW $$71 lambda_expression_body",
//t    "$$72 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$72 lambda_expression_body",
//t    "$$73 :",
//t    "$$74 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$73 opt_lambda_parameter_list CLOSE_PARENS ARROW $$74 lambda_expression_body",
//t    "$$75 :",
//t    "$$76 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$75 opt_lambda_parameter_list CLOSE_PARENS ARROW $$76 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$77 :",
//t    "$$78 :",
//t    "$$79 :",
//t    "$$80 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$77 type_declaration_name $$78 opt_class_base opt_type_parameter_constraints_clauses $$79 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$80 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "opt_type_parameter_constraints_clauses : error",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$81 :",
//t    "block : OPEN_BRACE $$81 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$82 :",
//t    "block_prepared : OPEN_BRACE $$82 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$83 :",
//t    "labeled_statement : identifier_inside_body COLON $$83 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$84 :",
//t    "block_variable_declaration : variable_type identifier_inside_body $$84 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$85 :",
//t    "block_variable_declaration : CONST variable_type identifier_inside_body $$85 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$86 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$86 opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$87 :",
//t    "switch_section : switch_labels $$87 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$88 :",
//t    "for_statement : FOR open_parens_any $$88 for_statement_cont",
//t    "for_statement_cont : opt_for_initializer SEMICOLON opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "for_statement_cont : error",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$89 :",
//t    "for_initializer : variable_type identifier_inside_body $$89 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$90 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$90 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$91 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$91 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$92 :",
//t    "unsafe_statement : UNSAFE $$92 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "$$93 :",
//t    "$$94 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$93 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$94 embedded_statement",
//t    "$$95 :",
//t    "$$96 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$95 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$96 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$97 :",
//t    "from_clause : FROM identifier_inside_body IN $$97 expression",
//t    "$$98 :",
//t    "from_clause : FROM type identifier_inside_body IN $$98 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : error",
//t    "$$99 :",
//t    "select_or_group_clause : SELECT $$99 expression",
//t    "$$100 :",
//t    "$$101 :",
//t    "select_or_group_clause : GROUP $$100 expression $$101 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$102 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$102 expression",
//t    "$$103 :",
//t    "where_clause : WHERE $$103 expression",
//t    "$$104 :",
//t    "$$105 :",
//t    "$$106 :",
//t    "join_clause : JOIN identifier_inside_body IN $$104 expression ON $$105 expression EQUALS $$106 expression opt_join_into",
//t    "$$107 :",
//t    "$$108 :",
//t    "$$109 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$107 expression ON $$108 expression EQUALS $$109 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$110 :",
//t    "orderby_clause : ORDERBY $$110 orderings",
//t    "orderings : order_by",
//t    "$$111 :",
//t    "orderings : order_by COMMA $$111 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$112 :",
//t    "orderings_then_by : orderings_then_by COMMA $$112 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$113 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$113 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$114 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$114 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$115 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$115 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$116 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$116 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 402 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 403 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 420 "cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 458 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 32:
  case_32();
  break;
case 41:
  case_41();
  break;
case 42:
#line 647 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 50:
  case_50();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
#line 756 "cs-parser.jay"
  { yyVal = "event"; savedCloseLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 59:
#line 757 "cs-parser.jay"
  { yyVal = "return"; savedCloseLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 60:
  case_60();
  break;
case 61:
#line 774 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
  case_62();
  break;
case 63:
#line 789 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
  case_64();
  break;
case 66:
#line 816 "cs-parser.jay"
  { yyVal = null; }
  break;
case 67:
  case_67();
  break;
case 68:
#line 827 "cs-parser.jay"
  { yyVal = null; }
  break;
case 69:
  case_69();
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
#line 871 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 75:
#line 879 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
#line 905 "cs-parser.jay"
  { yyVal = null; }
  break;
case 79:
#line 909 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 80:
#line 913 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 83:
#line 925 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 84:
#line 929 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 95:
  case_95();
  break;
case 96:
#line 959 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 97:
  case_97();
  break;
case 98:
  case_98();
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
#line 1000 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 103:
  case_103();
  break;
case 104:
  case_104();
  break;
case 107:
#line 1041 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 108:
#line 1045 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 109:
  case_109();
  break;
case 110:
#line 1061 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 111:
  case_111();
  break;
case 112:
  case_112();
  break;
case 115:
  case_115();
  break;
case 116:
  case_116();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
#line 1140 "cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 121:
  case_121();
  break;
case 122:
  case_122();
  break;
case 125:
#line 1170 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 126:
#line 1174 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 127:
  case_127();
  break;
case 128:
#line 1187 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 129:
  case_129();
  break;
case 132:
#line 1206 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 133:
#line 1210 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 134:
  case_134();
  break;
case 135:
#line 1226 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 140:
  case_140();
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 143:
#line 1297 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 144:
#line 1301 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 145:
  case_145();
  break;
case 146:
#line 1335 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 147:
  case_147();
  break;
case 148:
#line 1345 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 149:
  case_149();
  break;
case 150:
  case_150();
  break;
case 152:
#line 1403 "cs-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 153:
#line 1407 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 155:
  case_155();
  break;
case 156:
  case_156();
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 159:
  case_159();
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
#line 1479 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 163:
#line 1483 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 166:
  case_166();
  break;
case 167:
  case_167();
  break;
case 168:
  case_168();
  break;
case 169:
  case_169();
  break;
case 170:
#line 1558 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 171:
  case_171();
  break;
case 172:
#line 1599 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 174:
#line 1607 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
#line 1700 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
#line 1754 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 191:
  case_191();
  break;
case 192:
#line 1783 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 193:
  case_193();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
#line 1932 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
#line 1969 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 214:
#line 1981 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 215:
#line 1985 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 216:
#line 1992 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 217:
#line 1996 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 222:
#line 2004 "cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 223:
#line 2008 "cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 224:
#line 2012 "cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 225:
#line 2018 "cs-parser.jay"
  {
	  }
  break;
case 226:
  case_226();
  break;
case 228:
#line 2051 "cs-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 230:
  case_230();
  break;
case 231:
#line 2067 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 232:
  case_232();
  break;
case 234:
#line 2113 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 235:
#line 2114 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 236:
#line 2115 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 237:
#line 2116 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 238:
#line 2117 "cs-parser.jay"
  { yyVal = Operator.OpType.True; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 239:
#line 2118 "cs-parser.jay"
  { yyVal = Operator.OpType.False; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 240:
#line 2120 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 241:
#line 2121 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 242:
#line 2123 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 243:
#line 2124 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 244:
#line 2125 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 245:
#line 2126 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 246:
#line 2127 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 247:
#line 2128 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 248:
#line 2129 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 249:
#line 2130 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 250:
#line 2131 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 251:
#line 2132 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 252:
#line 2133 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 253:
#line 2134 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 254:
#line 2135 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 255:
#line 2136 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 256:
#line 2143 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 257:
  case_257();
  break;
case 258:
#line 2162 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 259:
  case_259();
  break;
case 260:
  case_260();
  break;
case 261:
  case_261();
  break;
case 262:
  case_262();
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 267:
#line 2265 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 270:
#line 2277 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 271:
  case_271();
  break;
case 272:
#line 2287 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 273:
  case_273();
  break;
case 274:
  case_274();
  break;
case 275:
  case_275();
  break;
case 276:
  case_276();
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 283:
#line 2396 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 284:
  case_284();
  break;
case 287:
#line 2413 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 288:
#line 2417 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 289:
  case_289();
  break;
case 290:
#line 2430 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
#line 2455 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 305:
#line 2549 "cs-parser.jay"
  {
		enumCommas.Add (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 315:
#line 2617 "cs-parser.jay"
  {
	  	enumCommas.Add (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 319:
  case_319();
  break;
case 320:
  case_320();
  break;
case 321:
#line 2675 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 322:
  case_322();
  break;
case 323:
#line 2697 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 324:
  case_324();
  break;
case 326:
  case_326();
  break;
case 328:
  case_328();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 337:
#line 2802 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 346:
  case_346();
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 354:
#line 2923 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 355:
#line 2930 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 357:
  case_357();
  break;
case 359:
  case_359();
  break;
case 361:
  case_361();
  break;
case 363:
#line 2968 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 364:
  case_364();
  break;
case 365:
#line 2988 "cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 366:
  case_366();
  break;
case 367:
#line 2997 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 368:
#line 3001 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 369:
  case_369();
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 372:
  case_372();
  break;
case 373:
#line 3040 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 374:
#line 3041 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 375:
#line 3042 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 376:
#line 3043 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 377:
#line 3044 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 378:
#line 3045 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 380:
#line 3050 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 381:
#line 3051 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 382:
#line 3052 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 383:
#line 3053 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 384:
#line 3054 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 385:
#line 3055 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 386:
#line 3056 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 387:
#line 3057 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 3058 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
  case_409();
  break;
case 410:
  case_410();
  break;
case 414:
#line 3105 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3109 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3110 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 421:
  case_421();
  break;
case 422:
#line 3143 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 423:
  case_423();
  break;
case 424:
  case_424();
  break;
case 425:
  case_425();
  break;
case 426:
  case_426();
  break;
case 427:
#line 3178 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 428:
  case_428();
  break;
case 429:
#line 3186 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 430:
  case_430();
  break;
case 431:
  case_431();
  break;
case 432:
#line 3202 "cs-parser.jay"
  { yyVal = null; }
  break;
case 434:
  case_434();
  break;
case 435:
  case_435();
  break;
case 436:
#line 3225 "cs-parser.jay"
  { yyVal = null; }
  break;
case 437:
#line 3229 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 438:
  case_438();
  break;
case 439:
  case_439();
  break;
case 440:
  case_440();
  break;
case 441:
  case_441();
  break;
case 442:
#line 3262 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 448:
#line 3290 "cs-parser.jay"
  { yyVal = null; }
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
  case_454();
  break;
case 455:
#line 3342 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
#line 3429 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 472:
#line 3437 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
#line 3457 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 476:
#line 3464 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
#line 3530 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 485:
  case_485();
  break;
case 486:
  case_486();
  break;
case 489:
#line 3557 "cs-parser.jay"
  { yyVal = null; }
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
#line 3635 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 504:
#line 3639 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 505:
#line 3646 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 506:
#line 3650 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
#line 3694 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 512:
  case_512();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
#line 3814 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 528:
  case_528();
  break;
case 529:
#line 3827 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 530:
  case_530();
  break;
case 531:
#line 3844 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 533:
#line 3852 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 537:
#line 3878 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 538:
#line 3882 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 542:
#line 3910 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 543:
#line 3914 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 544:
#line 3918 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 545:
#line 3922 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 546:
#line 3926 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 547:
#line 3930 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
  case_549();
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 553:
  case_553();
  break;
case 554:
#line 3962 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 555:
  case_555();
  break;
case 556:
#line 3971 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
#line 3975 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
  case_559();
  break;
case 560:
  case_560();
  break;
case 562:
  case_562();
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 567:
  case_567();
  break;
case 568:
  case_568();
  break;
case 570:
  case_570();
  break;
case 572:
  case_572();
  break;
case 574:
  case_574();
  break;
case 576:
  case_576();
  break;
case 578:
  case_578();
  break;
case 580:
  case_580();
  break;
case 582:
  case_582();
  break;
case 584:
#line 4097 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 585:
#line 4104 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
  case_588();
  break;
case 589:
  case_589();
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
#line 4201 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 602:
  case_602();
  break;
case 605:
#line 4217 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 606:
  case_606();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
#line 4262 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 614:
  case_614();
  break;
case 615:
  case_615();
  break;
case 616:
#line 4276 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 624:
#line 4301 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 629:
#line 4330 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 630:
#line 4343 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 631:
  case_631();
  break;
case 632:
  case_632();
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
#line 4386 "cs-parser.jay"
  { yyVal = null; }
  break;
case 636:
#line 4388 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[0+yyTop])); }
  break;
case 637:
  case_637();
  break;
case 638:
#line 4401 "cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 657:
  case_657();
  break;
case 659:
#line 4521 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
#line 4612 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 669:
#line 4616 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 670:
#line 4623 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 671:
  case_671();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
#line 4668 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 684:
#line 4712 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 685:
#line 4716 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 687:
  case_687();
  break;
case 690:
#line 4740 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 691:
#line 4744 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 720:
  case_720();
  break;
case 721:
  case_721();
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
  case_730();
  break;
case 731:
#line 4888 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 732:
#line 4892 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 733:
  case_733();
  break;
case 735:
  case_735();
  break;
case 736:
#line 4913 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 738:
  case_738();
  break;
case 739:
  case_739();
  break;
case 740:
  case_740();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 749:
  case_749();
  break;
case 752:
  case_752();
  break;
case 753:
  case_753();
  break;
case 754:
#line 5024 "cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 755:
  case_755();
  break;
case 760:
  case_760();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
#line 5074 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 766:
#line 5078 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 767:
#line 5079 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
#line 5147 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 776:
  case_776();
  break;
case 777:
  case_777();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
  case_781();
  break;
case 782:
#line 5191 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 783:
#line 5195 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 784:
  case_784();
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
#line 5224 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 792:
  case_792();
  break;
case 793:
  case_793();
  break;
case 794:
  case_794();
  break;
case 795:
#line 5263 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
#line 5291 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 800:
  case_800();
  break;
case 801:
  case_801();
  break;
case 803:
#line 5312 "cs-parser.jay"
  { yyVal = null; }
  break;
case 805:
#line 5317 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 809:
  case_809();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
  case_827();
  break;
case 830:
#line 5472 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 838:
#line 5525 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 839:
  case_839();
  break;
case 840:
#line 5544 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 841:
  case_841();
  break;
case 842:
#line 5562 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 843:
#line 5569 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 844:
  case_844();
  break;
case 845:
#line 5579 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
  case_848();
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
#line 5662 "cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
#line 5763 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 865:
  case_865();
  break;
case 866:
#line 5778 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 867:
  case_867();
  break;
case 868:
  case_868();
  break;
case 870:
  case_870();
  break;
case 871:
#line 5823 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 874:
  case_874();
  break;
case 875:
  case_875();
  break;
case 879:
  case_879();
  break;
case 885:
#line 5882 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 886:
  case_886();
  break;
case 887:
#line 5901 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 894:
  case_894();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 898:
#line 6045 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 899:
#line 6052 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 900:
  case_900();
  break;
case 902:
  case_902();
  break;
case 903:
  case_903();
  break;
case 905:
  case_905();
  break;
case 906:
  case_906();
  break;
case 907:
#line 6098 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 908:
  case_908();
  break;
case 909:
  case_909();
  break;
case 910:
#line 6115 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 927:
#line 6239 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 928:
#line 6246 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 929:
  case_929();
  break;
case 930:
  case_930();
  break;
case 931:
#line 6263 "cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], new MemberName (MemberCache.IndexerNameAlias));
	  }
  break;
case 932:
#line 6267 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 933:
  case_933();
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
  case_936();
  break;
case 938:
#line 6303 "cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 940:
#line 6311 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 941:
#line 6315 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 942:
#line 6322 "cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 946:
  case_946();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 410 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
		}
	  }

void case_8()
#line 422 "cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 442 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, report);
			ubag.AddExternAlias  (GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), lt, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 468 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 473 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_19()
#line 481 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		ubag.AddUsingAlias (GetLocation (yyVals[-4+yyTop]), lt, GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
		  }

void case_20()
#line 492 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_21()
#line 500 "cs-parser.jay"
{
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ubag.AddUsing (GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_22()
#line 513 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		MemberName name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file.NamespaceContainer)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		current_namespace = new NamespaceContainer (name, module, current_namespace, file);
		module.AddTypesContainer (current_namespace);
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		
		ubag.DeclareNamespace (GetLocation (yyVals[-1+yyTop]), name);
	  }

void case_23()
#line 544 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		ubag.OpenNamespace (GetLocation (yyVals[0+yyTop]));
	  }

void case_24()
#line 550 "cs-parser.jay"
{
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.CloseNamespace (GetLocation (yyVals[-1+yyTop]));
		if (yyVals[0+yyTop] != null)
			ubag.EndNamespace (GetLocation (yyVals[0+yyTop]));
		else
			ubag.EndNamespace ();
	  }

void case_25()
#line 564 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_26()
#line 569 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location) {
			DotLocation = GetLocation (yyVals[-1+yyTop])
		};
	  }

void case_27()
#line 576 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_32()
#line 594 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }

void case_41()
#line 626 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file.NamespaceContainer);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_50()
#line 676 "cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
		if (locationListStack.Count > 0)
			lbag.AddLocation (sect, locationListStack.Pop ());
		if (attributeCommas.Count > 0) {
			lbag.AppendTo (sect, attributeCommas);
			attributeCommas.Clear ();
		}
	  }

void case_51()
#line 687 "cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		
		if (locationListStack.Count > 0)
			lbag.AddLocation (sect, locationListStack.Pop ());
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_52()
#line 703 "cs-parser.jay"
{
		lexer.parsing_attribute_section = true;
		savedOpenLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_53()
#line 708 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_54()
#line 716 "cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_55()
#line 723 "cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		if (yyVals[-1+yyTop] != null) {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, savedCloseLocation, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		} else {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, savedCloseLocation, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		}
 	  }

void case_56()
#line 739 "cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];
		if (yyVals[-1+yyTop] != null) {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		} else {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, GetLocation (yyVals[0+yyTop]) }));
		}
	  }

void case_57()
#line 751 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
		savedCloseLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_60()
#line 759 "cs-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_62()
#line 776 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);
		attributeCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = attrs;
	  }

void case_64()
#line 791 "cs-parser.jay"
{
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();
		yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
		if (arguments != null) {
			attributeArgumentCommas.Insert (0, savedAttrParenOpenLocation);
			attributeArgumentCommas.Add (savedAttrParenCloseLocation);
			lbag.AddLocation (yyVal, attributeArgumentCommas);
			attributeArgumentCommas.Clear ();
		}
	  }

void case_67()
#line 818 "cs-parser.jay"
{
		savedAttrParenOpenLocation = GetLocation (yyVals[-2+yyTop]);
		savedAttrParenCloseLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = yyVals[-1+yyTop];
	  }

void case_69()
#line 829 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_70()
#line 835 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_71()
#line 841 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_72()
#line 856 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_76()
#line 881 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_77()
#line 891 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_95()
#line 944 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_97()
#line 961 "cs-parser.jay"
{ 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_98()
#line 968 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }

void case_99()
#line 980 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_100()
#line 985 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
#line 992 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null) 
			current_class.OptionalSemicolon = GetLocation (yyVals[-1+yyTop]);
		yyVal = pop_current_class ();
	  }

void case_103()
#line 1007 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_104()
#line 1020 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_109()
#line 1050 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_111()
#line 1063 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_112()
#line 1069 "cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_115()
#line 1084 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }

void case_116()
#line 1099 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_117()
#line 1112 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }

void case_118()
#line 1123 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_121()
#line 1146 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_122()
#line 1152 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_127()
#line 1179 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_129()
#line 1189 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_134()
#line 1215 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_136()
#line 1228 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_137()
#line 1234 "cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_140()
#line 1244 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_141()
#line 1253 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = (Method) yyVals[0+yyTop];
		async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
		current_container.AddMethod (m);
	  }

void case_142()
#line 1263 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			lbag.AppendToMember (method, savedLocation); /* semicolon*/
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_145()
#line 1303 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		var method = Method.Create (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop], yyVals[0+yyTop] != null);
				     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_147()
#line 1338 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_149()
#line 1347 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[-1+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_class, generic, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop], yyVals[-1+yyTop] != null);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_150()
#line 1384 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_155()
#line 1413 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_156()
#line 1419 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_157()
#line 1428 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_158()
#line 1437 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_159()
#line 1445 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_160()
#line 1458 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_161()
#line 1465 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_164()
#line 1485 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_165()
#line 1493 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		parameterListCommas.Clear ();
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_166()
#line 1502 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_167()
#line 1526 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_168()
#line 1535 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_169()
#line 1545 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_171()
#line 1560 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_175()
#line 1609 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_176()
#line 1633 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_177()
#line 1640 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_178()
#line 1647 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = Parameter.Modifier.This;
	  }

void case_179()
#line 1660 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_180()
#line 1666 "cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_181()
#line 1674 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_182()
#line 1682 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_183()
#line 1688 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
		savedLocation = GetLocation (yyVals[-1+yyTop]);
	  }

void case_185()
#line 1705 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_186()
#line 1716 "cs-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_187()
#line 1721 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_class, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_188()
#line 1735 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_189()
#line 1742 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_191()
#line 1756 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-6+yyTop];
		Indexer indexer = new Indexer (current_class, type, (MemberName) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_193()
#line 1785 "cs-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_198()
#line 1804 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_199()
#line 1818 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lexer.PropertyParsing = false;
	  }

void case_200()
#line 1839 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Get, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Get, GetModifierLocations (), savedLocation);
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_201()
#line 1863 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lexer.PropertyParsing = false;
	  }

void case_202()
#line 1889 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Set, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Set, GetModifierLocations (), savedLocation);
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_204()
#line 1914 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = null;
	  }

void case_205()
#line 1919 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_207()
#line 1934 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_208()
#line 1941 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_209()
#line 1954 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_210()
#line 1960 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) 
			current_class.OptionalSemicolon = GetLocation (yyVals[0+yyTop]);
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_226()
#line 2020 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
			if (yyVals[0+yyTop] == null) { /* Semicolon*/
				lbag.AppendTo (op, savedLocation); 
			}
		}
		
		current_local_parameters = null;
	  }

void case_230()
#line 2057 "cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_232()
#line 2069 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), savedOperatorLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_257()
#line 2145 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_259()
#line 2164 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_260()
#line 2179 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_261()
#line 2185 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_262()
#line 2195 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_263()
#line 2214 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_264()
#line 2223 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_265()
#line 2234 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }

void case_271()
#line 2279 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_273()
#line 2289 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_274()
#line 2295 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_275()
#line 2303 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_276()
#line 2312 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_277()
#line 2337 "cs-parser.jay"
{
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_278()
#line 2351 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_279()
#line 2364 "cs-parser.jay"
{
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_280()
#line 2372 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_281()
#line 2379 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_284()
#line 2398 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_289()
#line 2422 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_291()
#line 2432 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_292()
#line 2441 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_296()
#line 2462 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_297()
#line 2467 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_298()
#line 2472 "cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_299()
#line 2480 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_300()
#line 2492 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_301()
#line 2508 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_302()
#line 2520 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_303()
#line 2536 "cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_306()
#line 2552 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_307()
#line 2557 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		enumCommas.Add (GetLocation (yyVals[0+yyTop]));

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-6+yyTop], MakeName (name), (Attributes) yyVals[-7+yyTop]), null);
	  }

void case_308()
#line 2570 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_309()
#line 2576 "cs-parser.jay"
{
		enumCommas.Add (GetLocation (yyVals[-1+yyTop]));
		if (yyVals[0+yyTop] != null)
			current_class.OptionalSemicolon = GetLocation (yyVals[0+yyTop]);
		if (doc_support)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

		lbag.AddMember (current_class, GetModifierLocations (), enumCommas);
		enumCommas.Clear ();
		yyVal = pop_current_class ();
	  }

void case_311()
#line 2594 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
			yyVal = null;
		} else {
			enumCommas.Add (GetLocation (yyVals[-1+yyTop]));
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_312()
#line 2605 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_317()
#line 2623 "cs-parser.jay"
{
	  	enumCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_318()
#line 2631 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_319()
#line 2644 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_320()
#line 2652 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_322()
#line 2677 "cs-parser.jay"
{
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);
		p.CheckParameters (del);

		ubag.PushTypeDeclaration (del);
		ubag.PopTypeDeclaration ();

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_324()
#line 2699 "cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_326()
#line 2717 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_328()
#line 2728 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_330()
#line 2739 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_331()
#line 2749 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_333()
#line 2761 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
		var list = locationListStack.Pop ();
		list.Add (GetLocation (yyVals[-2+yyTop]));
		list.Add (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVals[-1+yyTop], list);
	
		yyVal = yyVals[-1+yyTop];;
	  }

void case_334()
#line 2772 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_335()
#line 2780 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Push (new List<Location> ());
	  }

void case_336()
#line 2787 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Peek ().Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_338()
#line 2804 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_339()
#line 2813 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_341()
#line 2824 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_342()
#line 2833 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_343()
#line 2838 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[0+yyTop]));
	  }

void case_344()
#line 2846 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_345()
#line 2852 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_346()
#line 2860 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_348()
#line 2870 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AppendTo (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_349()
#line 2881 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_350()
#line 2887 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AppendTo (type_args, GetLocation (yyVals[-1+yyTop]));
	  }

void case_351()
#line 2897 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		var variance =  (Variance) yyVals[-1+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], variance, lt.Location);
		if (variance != Variance.None)
			lbag.AddLocation (yyVal, savedLocation);
  	  }

void case_352()
#line 2905 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }

void case_357()
#line 2939 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
#line 2948 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_361()
#line 2957 "cs-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_364()
#line 2973 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }

void case_366()
#line 2990 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_369()
#line 3006 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_370()
#line 3012 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		lbag.AppendTo (types, GetLocation (yyVals[-1+yyTop]));
		yyVal = types;
	  }

void case_371()
#line 3022 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_372()
#line 3029 "cs-parser.jay"
{
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }

void case_409()
#line 3091 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_410()
#line 3095 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_421()
#line 3136 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_423()
#line 3148 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_424()
#line 3155 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_425()
#line 3162 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_426()
#line 3169 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_428()
#line 3179 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_430()
#line 3187 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_431()
#line 3195 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_434()
#line 3208 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_435()
#line 3218 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_438()
#line 3234 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_439()
#line 3240 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (a, GetLocation (yyVals[-1+yyTop]));
	  	yyVal = a;
	  }

void case_440()
#line 3246 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_441()
#line 3254 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_443()
#line 3263 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_444()
#line 3271 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_445()
#line 3278 "cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_450()
#line 3296 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_451()
#line 3302 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_452()
#line 3312 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_453()
#line 3327 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_454()
#line 3332 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_459()
#line 3353 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_460()
#line 3358 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_461()
#line 3363 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_462()
#line 3368 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_464()
#line 3380 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_465()
#line 3388 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_466()
#line 3394 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_467()
#line 3400 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_468()
#line 3408 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_469()
#line 3414 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_473()
#line 3442 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_474()
#line 3447 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_477()
#line 3469 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_478()
#line 3482 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_479()
#line 3494 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_480()
#line 3502 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_481()
#line 3509 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_482()
#line 3516 "cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_483()
#line 3521 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_485()
#line 3532 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_486()
#line 3540 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_491()
#line 3563 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_492()
#line 3569 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	lbag.AppendTo (a, GetLocation (yyVals[-1+yyTop]));

	  	yyVal = a;
	  }

void case_493()
#line 3580 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_494()
#line 3586 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_495()
#line 3592 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_496()
#line 3597 "cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_500()
#line 3612 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_501()
#line 3620 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_502()
#line 3625 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_507()
#line 3655 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_508()
#line 3662 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_509()
#line 3676 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_510()
#line 3682 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_512()
#line 3696 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_515()
#line 3707 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_516()
#line 3715 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_517()
#line 3721 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_518()
#line 3729 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location) {
			DotLocation = GetLocation (yyVals[-1+yyTop])
		};
	  }

void case_519()
#line 3737 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_520()
#line 3745 "cs-parser.jay"
{
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_521()
#line 3759 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_522()
#line 3769 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_523()
#line 3780 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_524()
#line 3788 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_525()
#line 3796 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_526()
#line 3804 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_528()
#line 3816 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_530()
#line 3829 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_534()
#line 3854 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  	savedOpenLocation = GetLocation (yyVals[-3+yyTop]);
	  	savedCloseLocation = GetLocation (yyVals[-2+yyTop]);
	  }

void case_535()
#line 3864 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_539()
#line 3884 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_540()
#line 3889 "cs-parser.jay"
{
		if (!async_block) {
			report.Error (1992, GetLocation (yyVals[-1+yyTop]),
				"The `await' operator can only be used when its containing method or lambda expression is marked with the `async' modifier");
		} else {
			current_block.ParametersBlock.IsAsync = true;
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_549()
#line 3936 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_550()
#line 3941 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_551()
#line 3946 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_553()
#line 3955 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_555()
#line 3964 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_559()
#line 3981 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_560()
#line 3986 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_562()
#line 3995 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
#line 4000 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 4005 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
#line 4010 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 4019 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_568()
#line 4024 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_570()
#line 4033 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_572()
#line 4042 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
#line 4051 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 4060 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 4069 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 4078 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
#line 4089 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 4106 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 4111 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 4116 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_589()
#line 4121 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 4126 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_591()
#line 4131 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 4136 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
#line 4141 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 4146 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
#line 4151 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 4159 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Clear ();
		yyVal = pars;
	  }

void case_597()
#line 4166 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = pars;
	  }

void case_598()
#line 4182 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_599()
#line 4188 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_600()
#line 4194 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_602()
#line 4202 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
		lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_606()
#line 4219 "cs-parser.jay"
{
		Block b = end_block (lexer.Location);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_608()
#line 4230 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_609()
#line 4238 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_610()
#line 4244 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_611()
#line 4249 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_612()
#line 4255 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_614()
#line 4264 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_615()
#line 4269 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_617()
#line 4278 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_618()
#line 4283 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_625()
#line 4306 "cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_626()
#line 4311 "cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_627()
#line 4316 "cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_631()
#line 4345 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		Class c = new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
		
		push_current_class (c, yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_632()
#line 4357 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_633()
#line 4370 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_634()
#line 4376 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] != null) 
			current_class.OptionalSemicolon = GetLocation (yyVals[0+yyTop]);
		yyVal = pop_current_class ();
	  }

void case_637()
#line 4393 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_640()
#line 4407 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_641()
#line 4426 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == module)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_642()
#line 4434 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_643()
#line 4439 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_644()
#line 4444 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_645()
#line 4449 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_646()
#line 4454 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_647()
#line 4459 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_648()
#line 4464 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_649()
#line 4469 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_650()
#line 4474 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4479 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4484 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4489 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4494 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4501 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4510 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-1+yyTop]));
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }

void case_660()
#line 4523 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_661()
#line 4531 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_662()
#line 4537 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_663()
#line 4556 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_664()
#line 4565 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_665()
#line 4571 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		lbag.AppendTo (constraints, GetLocation (yyVals[-1+yyTop]));
		yyVal = constraints;
	  }

void case_666()
#line 4598 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_667()
#line 4605 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_671()
#line 4625 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }

void case_672()
#line 4635 "cs-parser.jay"
{
		yyVal = Variance.Covariant;
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_673()
#line 4640 "cs-parser.jay"
{
		yyVal = Variance.Contravariant;
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_674()
#line 4661 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_676()
#line 4673 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_677()
#line 4678 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_678()
#line 4687 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_679()
#line 4692 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_687()
#line 4719 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_720()
#line 4783 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_721()
#line 4788 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_722()
#line 4793 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_723()
#line 4801 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_724()
#line 4809 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_727()
#line 4822 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_728()
#line 4838 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_729()
#line 4868 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_730()
#line 4879 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_733()
#line 4894 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_735()
#line 4903 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_738()
#line 4919 "cs-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_739()
#line 4929 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_740()
#line 4936 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_741()
#line 4942 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_742()
#line 4949 "cs-parser.jay"
{
		if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = current_variable;;
		current_variable = null;
	  }

void case_744()
#line 4963 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_745()
#line 4968 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_749()
#line 4986 "cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_752()
#line 5001 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_753()
#line 5010 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_755()
#line 5026 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[-1+yyTop]);
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_760()
#line 5044 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_762()
#line 5057 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_763()
#line 5062 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_764()
#line 5070 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_768()
#line 5088 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementExpression (EmptyExpressionStatement.Instance);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_769()
#line 5101 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_770()
#line 5109 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_773()
#line 5123 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_774()
#line 5132 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_776()
#line 5149 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_777()
#line 5158 "cs-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_779()
#line 5167 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_780()
#line 5174 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_781()
#line 5181 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new List<SwitchSection> ();
	  }

void case_784()
#line 5200 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_785()
#line 5207 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_786()
#line 5217 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_792()
#line 5236 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_793()
#line 5248 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_794()
#line 5256 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_796()
#line 5272 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = new For ((Statement) yyVals[-6+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-5+yyTop]));
	  }

void case_797()
#line 5284 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_800()
#line 5297 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_801()
#line 5304 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_809()
#line 5328 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_810()
#line 5344 "cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }

void case_811()
#line 5349 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_812()
#line 5358 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_819()
#line 5381 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_820()
#line 5389 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_821()
#line 5397 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_822()
#line 5403 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_823()
#line 5408 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_824()
#line 5416 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_825()
#line 5424 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_826()
#line 5432 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_827()
#line 5448 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_831()
#line 5474 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_832()
#line 5479 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_833()
#line 5484 "cs-parser.jay"
{
		report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }

void case_834()
#line 5492 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_835()
#line 5499 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }

void case_839()
#line 5527 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_841()
#line 5546 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_844()
#line 5574 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
#line 5584 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_847()
#line 5595 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_848()
#line 5605 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_849()
#line 5610 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_850()
#line 5623 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_851()
#line 5633 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_852()
#line 5638 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_853()
#line 5648 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = u;
	  }

void case_855()
#line 5664 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_856()
#line 5676 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_857()
#line 5688 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_858()
#line 5699 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_859()
#line 5706 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_860()
#line 5715 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_861()
#line 5723 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_862()
#line 5738 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_863()
#line 5746 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_865()
#line 5765 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_867()
#line 5780 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_868()
#line 5797 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_870()
#line 5813 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_872()
#line 5825 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_873()
#line 5832 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_874()
#line 5840 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_875()
#line 5847 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_879()
#line 5864 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_886()
#line 5884 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_888()
#line 5903 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_889()
#line 5913 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_890()
#line 5921 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_891()
#line 5929 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_892()
#line 5937 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_893()
#line 5975 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_894()
#line 5983 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_895()
#line 5991 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_896()
#line 5999 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_900()
#line 6054 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_902()
#line 6065 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_903()
#line 6072 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_905()
#line 6081 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_906()
#line 6088 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_908()
#line 6100 "cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_909()
#line 6105 "cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_911()
#line 6117 "cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_912()
#line 6122 "cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_914()
#line 6132 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_915()
#line 6148 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_918()
#line 6175 "cs-parser.jay"
{ 
		current_container = new Class (current_namespace, current_class, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);
		current_class = current_container;

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_container.AddMethod (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_919()
#line 6205 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_929()
#line 6248 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_930()
#line 6254 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_933()
#line 6269 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], new MemberName (MemberCache.IndexerNameAlias));
	  }

void case_934()
#line 6274 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_935()
#line 6282 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_936()
#line 6290 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_944()
#line 6328 "cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_945()
#line 6334 "cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_946()
#line 6343 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   14,   15,   15,
   16,   21,   22,   19,   20,   20,   20,   24,   24,   25,
   25,   18,    7,    7,    6,    6,   23,   23,    8,    8,
   26,   26,   27,   27,   27,   27,   27,    9,    9,   10,
   10,   35,   33,   38,   34,   34,   36,   36,   36,   36,
   37,   37,   42,   39,   40,   41,   41,   43,   43,   43,
   43,   43,   44,   44,   48,   45,   47,   50,   50,   50,
   51,   51,   52,   52,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   66,   68,   70,   71,   72,
   29,   29,   75,   54,   76,   76,   77,   77,   78,   80,
   74,   74,   79,   79,   85,   55,   89,   55,   55,   84,
   92,   84,   86,   86,   93,   93,   94,   95,   94,   90,
   90,   96,   96,   97,   98,   88,   88,   91,   91,   91,
  101,   56,  104,  105,   99,  106,  107,  108,   99,   99,
  100,  100,  103,  103,  111,  111,  111,  111,  111,  111,
  111,  111,  111,  111,  112,  112,  115,  115,  115,  118,
  115,  116,  116,  119,  119,  120,  120,  120,  113,  113,
  113,  121,  121,  121,  114,  123,  125,  126,   57,  128,
  129,  130,   59,  124,  124,  124,  124,  124,  134,  131,
  135,  132,  133,  133,  133,  136,  137,  138,  140,   30,
   30,  139,  139,  141,  141,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  145,   60,  144,  144,  146,  146,
  149,  143,  143,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  151,  150,  152,  150,  150,
  150,   61,  155,  157,  153,  154,  154,  156,  156,  161,
  159,  162,  159,  159,  163,   62,  165,   58,  168,  169,
   58,  164,  171,  164,  166,  166,  172,  172,  173,  174,
  173,  175,  170,  167,  167,  167,  167,  167,  179,  176,
  180,  177,  178,  178,  181,  183,  185,  186,   31,  182,
  182,  182,  184,  184,  184,  187,  187,  188,  189,  188,
  190,  191,  192,   32,  193,  193,   17,   17,  194,  194,
  197,  196,  196,  196,  198,  198,  200,   65,  122,  102,
  102,  127,  127,  201,  201,  201,  199,  199,  202,  202,
  203,  203,  205,  205,   83,   73,   73,   87,   87,  117,
  117,  147,  147,  206,  206,  206,  206,  206,  210,  210,
  211,  211,  209,  209,  209,  209,  209,  209,  209,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  214,  214,
  214,  215,  215,  215,  235,  235,  236,  236,  237,  237,
  217,  217,  234,  234,  234,  234,  234,  234,  234,  234,
  219,  238,  238,  239,  239,  240,  240,  242,  242,  242,
  243,  243,  243,  243,  243,  244,  244,  160,  160,  248,
  248,  248,  248,  248,  250,  250,  249,  249,  251,  251,
  251,  251,  252,  220,  247,  247,  247,  253,  253,  254,
  254,  221,  222,  222,  223,  224,  225,  225,  216,  216,
  216,  216,  216,  259,  255,  226,  260,  260,  261,  261,
  262,  262,  263,  263,  263,  263,  256,  256,  207,  207,
  258,  258,  264,  264,  257,  257,   82,   82,  265,  265,
  266,  227,  267,  267,  267,  268,  268,  268,  268,  268,
  269,  195,  228,  229,  230,  231,  271,  232,  272,  232,
  270,  270,  274,  273,  218,  275,  275,  275,  275,  275,
  276,  276,  276,  276,  276,  276,  276,  277,  277,  277,
  277,  278,  278,  278,  278,  278,  278,  279,  279,  279,
  280,  280,  280,  280,  280,  281,  281,  281,  282,  282,
  283,  283,  284,  284,  285,  285,  286,  286,  287,  287,
  288,  288,  289,  289,  290,  290,  290,  290,  290,  290,
  290,  290,  290,  290,  290,  291,  291,  292,  292,  292,
  293,  293,  294,  294,  297,  295,  296,  296,  299,  298,
  300,  298,  301,  302,  298,  303,  304,  298,   46,   46,
  245,  245,  245,  245,  233,  233,  233,   81,  306,  307,
  308,  309,  310,   28,   64,   64,   63,   63,  109,  109,
  311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
  311,  311,  311,  311,  311,   67,   67,   69,   69,   69,
  312,  312,  313,  314,  314,  315,  315,  315,  315,  204,
  204,  316,  316,  318,  110,  319,  319,  320,  158,  317,
  317,  321,  321,  322,  322,  322,  322,  326,  326,  327,
  327,  327,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  328,  328,  328,  328,  328,
  328,  328,  328,  328,  328,  328,  328,  328,  342,  342,
  342,  342,  329,  343,  325,  344,  344,  345,  345,  345,
  345,  345,  345,  208,  208,  346,   49,   49,  348,  323,
  351,  323,  347,  347,  347,  349,  349,  355,  355,  354,
  354,  356,  356,  350,  350,  352,  352,  357,  357,  358,
  353,  353,  353,  330,  330,  341,  341,  359,  360,  360,
  331,  331,  361,  361,  364,  362,  363,  363,  365,  365,
  365,  368,  366,  367,  367,  369,  369,  332,  332,  332,
  332,  370,  371,  375,  372,  374,  374,  376,  376,  380,
  379,  379,  377,  377,  378,  378,  382,  381,  381,  373,
  383,  373,  333,  333,  333,  333,  333,  333,  384,  385,
  386,  386,  386,  387,  388,  389,  389,  390,  390,  334,
  334,  334,  334,  391,  391,  393,  393,  392,  394,  392,
  392,  335,  336,  395,  339,  337,  397,  398,  340,  399,
  400,  338,  338,  396,  396,  305,  305,  305,  305,  401,
  401,  403,  403,  405,  404,  406,  404,  402,  402,  402,
  410,  408,  411,  412,  408,  407,  407,  413,  413,  414,
  414,  414,  414,  414,  419,  415,  420,  416,  421,  422,
  423,  417,  425,  426,  427,  417,  424,  424,  429,  418,
  428,  432,  428,  431,  434,  431,  430,  430,  430,  433,
  433,  433,  409,  435,  409,    3,    3,  436,    3,    3,
  437,  437,  246,  246,  241,  241,    5,  438,  438,  438,
  438,  442,  438,  438,  438,  438,  439,  439,  440,  443,
  440,  441,  441,  444,  444,  445,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    1,    5,    2,
    3,    0,    0,   11,    1,    3,    1,    0,    1,    0,
    1,    1,    0,    1,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    0,    3,    0,    6,    3,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    0,    4,    4,    0,    1,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,
   16,    5,    0,    9,    0,    1,    1,    2,    3,    0,
    3,    1,    1,    1,    0,    8,    0,    9,    6,    0,
    0,    3,    0,    1,    1,    2,    2,    0,    5,    0,
    1,    1,    2,    3,    0,    4,    2,    1,    1,    1,
    0,    3,    0,    0,   10,    0,    0,    0,   12,    8,
    1,    1,    0,    1,    1,    3,    3,    3,    5,    3,
    5,    1,    1,    1,    1,    3,    4,    6,    4,    0,
    7,    0,    1,    1,    2,    1,    1,    1,    4,    6,
    4,    1,    2,    2,    1,    0,    0,    0,   10,    0,
    0,    0,   13,    1,    2,    1,    2,    1,    0,    5,
    0,    5,    1,    1,    1,    0,    0,    0,    0,   15,
    5,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    5,    1,    1,    1,    1,
    0,    7,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    7,    0,    7,    2,
    2,    2,    0,    0,    9,    1,    1,    0,    1,    0,
    6,    0,    6,    1,    0,    8,    0,    9,    0,    0,
   10,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    2,    2,    2,    1,    1,    1,    0,    5,
    0,    5,    1,    1,    0,    0,    0,    0,   13,    0,
    2,    2,    0,    1,    2,    1,    3,    2,    0,    5,
    0,    0,    0,   13,    0,    1,    1,    3,    1,    4,
    2,    0,    3,    2,    1,    3,    0,    3,    1,    1,
    3,    1,    2,    3,    4,    4,    0,    3,    1,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    2,    2,    2,    2,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    4,    4,    4,    3,    3,    4,    3,    4,
    4,    0,    1,    3,    4,    0,    1,    1,    3,    2,
    3,    1,    2,    3,    2,    1,    1,    0,    1,    1,
    3,    3,    2,    2,    1,    1,    1,    1,    2,    2,
    4,    3,    1,    4,    1,    3,    2,    1,    3,    1,
    1,    1,    4,    3,    2,    2,    6,    3,    7,    4,
    3,    7,    3,    0,    2,    4,    1,    2,    0,    1,
    1,    3,    3,    1,    1,    1,    0,    1,    1,    2,
    2,    3,    1,    2,    0,    1,    2,    4,    1,    3,
    0,    5,    1,    1,    1,    2,    3,    3,    4,    4,
    1,    2,    4,    4,    4,    4,    0,    4,    0,    5,
    0,    1,    0,    4,    4,    1,    2,    2,    4,    2,
    1,    2,    2,    2,    2,    2,    2,    1,    3,    3,
    3,    1,    3,    3,    3,    3,    3,    1,    3,    3,
    1,    3,    3,    3,    3,    1,    3,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    5,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    2,    1,
    0,    1,    1,    1,    0,    2,    1,    1,    0,    4,
    0,    5,    0,    0,    7,    0,    0,    8,    1,    1,
    1,    1,    1,    1,    6,    4,    4,    1,    1,    0,
    0,    0,    0,   15,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    2,    0,    1,    1,
    1,    2,    4,    1,    3,    1,    3,    1,    1,    0,
    1,    1,    1,    0,    4,    1,    1,    0,    4,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    4,    1,    2,    2,    2,    2,
    2,    2,    1,    1,    2,    1,    1,    1,    0,    6,
    0,    7,    0,    2,    1,    0,    1,    0,    1,    1,
    2,    2,    4,    0,    2,    0,    1,    1,    2,    4,
    1,    5,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    5,    7,    0,    8,    0,    1,    1,    2,
    1,    0,    3,    1,    2,    3,    1,    1,    1,    1,
    1,    5,    7,    0,    4,    7,    1,    0,    1,    0,
    5,    1,    0,    1,    0,    1,    1,    1,    3,    6,
    0,    9,    1,    1,    1,    1,    1,    1,    2,    2,
    3,    4,    3,    3,    3,    4,    3,    0,    1,    3,
    4,    5,    3,    1,    2,    0,    1,    2,    0,    7,
    3,    2,    2,    0,    3,    5,    0,    0,   10,    0,
    0,   10,    5,    0,    2,    2,    2,    2,    2,    4,
    5,    4,    5,    0,    5,    0,    6,    3,    2,    1,
    0,    3,    0,    0,    6,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    0,    5,    0,    3,    0,    0,
    0,   12,    0,    0,    0,   13,    0,    2,    0,    3,
    1,    0,    4,    1,    0,    4,    1,    2,    2,    1,
    2,    2,    0,    0,    4,    2,    3,    0,    4,    2,
    2,    3,    0,    1,    1,    1,    2,    2,    2,    4,
    3,    0,    7,    4,    4,    3,    1,    3,    0,    0,
    4,    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  916,    0,    0,  920,    0,
    0,   15,   17,   18,  375,  381,  388,  376,  378,    0,
  377,    0,  384,  386,  373,    0,  380,  382,  374,  385,
  387,  383,  337,  937,    0,  379,  927,    0,   10,    1,
    0,    0,    0,   12,    0,  770,    0,    0,    0,    0,
    0,    0,    0,    0,  416,    0,    0,    0,    0,    0,
    0,    0,  414,    0,    0,    0,  472,    0,  415,    0,
  511,    0,  844,    0,    0,    0,  624,    0,    0,    0,
    0,    0,    0,    0,  674,    0,  723,    0,    0,    0,
    0,    0,    0,    0,    0,  413,    0,  613,    0,  769,
    0,  706,    0,    0,    0,    0,  390,  391,    0,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  411,  412,  620,  541,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  621,  619,  622,  623,  690,  692,    0,  688,  691,
  707,  709,  710,  711,  712,  713,  714,  715,  716,  717,
  718,  708,    0,    0,    0,  771,  772,  788,  789,  790,
  791,  813,  814,  815,  816,  817,  818,    0,    0,    0,
   20,    0,    0,    0,  327,    0,  329,  924,   16,  917,
    0,    0,  239,  238,  235,  240,  241,  234,  253,  252,
  245,  246,  242,  244,  243,  247,  236,  237,  248,  249,
  255,  254,  250,  251,    0,    0,  940,    0,  929,    0,
  928,    3,   52,    0,    0,    0,   42,   39,   41,   43,
   44,   45,   46,   47,   50,   13,    0,    0,    0,  819,
  417,  418,  842,    0,    0,    0,    0,    0,    0,  392,
    0,  820,    0,  533,  527,  532,  722,  768,  693,  720,
  719,  721,  694,  695,  696,  697,  698,  699,  700,  701,
  702,  703,  704,  705,    0,    0,    0,  794,    0,    0,
    0,  738,  737,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  829,    0,  389,    0,    0,    0,    0,
    0,    0,  843,    0,    0,    0,  736,  732,    0,    0,
    0,    0,    0,    0,    0,  356,    0,    0,    0,    0,
    0,    0,    0,    0,  616,    0,  540,    0,    0,  538,
  542,  543,  537,  547,  546,  544,  545,  609,  522,    0,
  410,  409,    0,    0,    0,    0,    0,  724,    0,  326,
    0,  730,  731,    0,  475,  476,    0,    0,    0,  728,
  729,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  919,  689,  739,  727,    0,
  766,  767,  870,  887,    0,    0,    0,  899,  858,  856,
  880,    0,    0,  878,  881,  882,  883,  884,  859,  857,
    0,    0,    0,  331,    0,   21,    0,    0,    0,  936,
    0,  338,    0,    0,    0,  938,    0,    0,   40,  646,
  652,  644,    0,  641,  651,  645,  643,  642,  649,  647,
  648,  654,  650,  653,  655,    0,    0,  639,   51,  474,
    0,  470,  471,    0,    0,  468,    0,  741,    0,    0,
    0,    0,  764,  765,    0,    0,    0,  628,    0,  823,
  821,  629,    0,    0,  496,    0,    0,    0,  487,    0,
  491,  501,  503,    0,  483,    0,    0,    0,    0,    0,
  478,    0,  481,    0,  485,  358,  824,    0,    0,  825,
  833,    0,    0,    0,  834,    0,    0,  845,    0,    0,
  735,    0,  368,  364,  365,    0,    0,  363,  366,  367,
    0,    0,    0,  548,    0,    0,  529,    0,  611,  687,
    0,    0,  682,  684,  685,  686,  421,  422,    0,  334,
  335,    0,  177,  176,  178,    0,    0,    0,    0,  360,
    0,  596,    0,    0,  827,    0,    0,  426,    0,  429,
    0,  427,    0,    0,    0,    0,    0,    0,  455,  458,
    0,    0,  450,  457,  456,    0,  584,  583,  585,  586,
  587,  588,  589,  590,  591,  592,  593,  595,  594,  549,
  551,  550,  556,  557,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  580,
    0,    0,  500,    0,    0,    0,    0,    0,    0,    0,
  871,  873,  869,    0,  879,    0,    0,  328,  934,  935,
  352,    0,    0,  349,    0,    0,  174,    0,    0,  944,
  930,  932,   60,   58,   59,    0,    0,   53,    0,    0,
   61,   63,   27,   25,    0,    0,  305,  636,    0,  640,
  425,    0,  473,    0,  524,    0,  535,  164,  185,    0,
    0,  154,    0,    0,    0,  165,  528,    0,  847,  797,
    0,  808,  795,    0,  799,    0,    0,    0,  822,    0,
    0,    0,  486,    0,  502,  504,    0,    0,  442,    0,
    0,  438,    0,    0,  465,    0,  506,  480,    0,  140,
  507,  138,  139,  509,    0,  523,    0,  838,    0,  831,
    0,  835,  515,    0,    0,    0,  353,    0,  513,    0,
    0,  525,    0,  850,    0,  862,    0,  860,    0,    0,
  626,  627,    0,    0,    0,  676,  677,  675,  683,  604,
  610,  603,    0,    0,  333,  599,    0,    0,    0,  539,
  826,  725,  430,  424,  428,  423,  526,  464,  463,  460,
  459,    0,  454,  419,  420,  431,    0,    0,  745,    0,
    0,  888,  864,    0,  889,    0,  885,    0,  900,    0,
    0,    0,    0,  868,   19,  330,  673,  672,    0,  671,
    0,  348,  946,  175,  941,    0,    0,   54,    0,    0,
    0,    0,    0,    0,  355,    0,  630,    0,    0,   80,
   79,    0,  469,    0,    0,    0,    0,    0,  534,    0,
    0,    0,    0,    0,  800,    0,    0,    0,    0,    0,
  846,  493,  492,  445,    0,    0,  925,  926,  434,  440,
    0,  443,    0,  467,    0,    0,    0,    0,    0,  775,
  841,    0,  832,    0,  521,  516,    0,    0,  512,    0,
  853,    0,  792,  863,  861,    0,  530,    0,  612,  608,
  607,  606,  336,  598,  597,  614,  462,    0,  452,  451,
  582,    0,  761,  744,    0,    0,    0,  750,    0,  866,
    0,  893,    0,  908,  909,  902,  872,  874,  914,  351,
  350,  945,    0,    0,   62,   56,    0,   64,   26,   23,
    0,    0,    0,  211,    0,  102,    0,   77,  755,  113,
  114,    0,    0,    0,  758,  183,  184,    0,    0,    0,
    0,  157,  166,  158,  160,    0,    0,    0,    0,  804,
    0,  809,  810,    0,    0,  444,  446,  447,  441,  435,
  439,    0,  498,    0,  466,  477,  433,  510,  508,    0,
  837,    0,    0,    0,  517,    0,    0,  625,  617,    0,
  461,    0,    0,  740,  751,  865,    0,    0,    0,  886,
    0,    0,    0,  933,    0,    0,    0,   69,   70,   73,
   74,    0,  321,    0,  306,  631,  207,   97,    0,  742,
  759,  169,    0,  181,    0,    0,    0,  793,  855,    0,
    0,    0,    0,  811,  774,  482,  479,  781,    0,  787,
    0,    0,  779,    0,  784,  839,  520,  519,    0,    0,
  615,    0,    0,  867,  890,    0,    0,    0,  904,    0,
  915,    0,   75,   67,    0,    0,    0,  312,  311,    0,
    0,    0,    0,    0,    0,  170,    0,  161,  159,  848,
  801,    0,    0,  806,    0,    0,  776,  780,    0,  785,
    0,  851,  618,    0,  753,    0,  894,  911,  912,  905,
  875,   55,    0,   71,   72,    0,    0,  307,    0,    0,
    0,    0,  760,  168,    0,  180,    0,    0,  812,  786,
    0,  678,  840,    0,  762,    0,    0,    0,   76,    0,
    0,  322,    0,  372,  371,    0,  369,  660,    0,  632,
    0,  661,  208,   98,  171,  849,  796,    0,  852,  891,
    0,  906,    0,    0,    0,  308,    0,  316,    0,    0,
    0,  662,    0,    0,    0,    0,  895,   29,   24,  323,
    0,    0,    0,  370,    0,    0,    0,   99,  679,    0,
    0,    0,    0,    0,  317,  668,    0,  669,  666,    0,
  664,   95,    0,   94,    0,    0,   83,   85,   86,   87,
   88,   89,   90,   91,   92,   93,  141,    0,    0,  224,
  216,  217,  218,  219,  220,  221,  222,  223,    0,    0,
  214,    0,    0,  892,    0,  324,    0,  309,    0,    0,
    0,  633,   84,    0,  267,  262,  266,    0,  209,  215,
    0,  898,  896,  320,  667,  665,    0,    0,    0,    0,
    0,    0,    0,  275,    0,    0,  225,    0,    0,  233,
    0,  152,  142,  151,    0,  100,    0,    0,  261,    0,
    0,  260,    0,  146,    0,    0,  342,    0,  340,    0,
    0,  186,    0,    0,    0,    0,    0,  634,  210,    0,
  103,    0,  339,    0,    0,    0,    0,  117,    0,    0,
    0,    0,    0,    0,  143,    0,    0,  190,    0,  343,
    0,  228,  227,  226,    0,  101,    0,  279,    0,  258,
  119,    0,  256,    0,    0,    0,  121,    0,  344,    0,
    0,  187,    0,    0,    0,  341,  231,  112,  110,    0,
    0,  283,    0,    0,    0,    0,    0,  147,    0,  264,
    0,    0,    0,    0,  125,    0,    0,    0,    0,  345,
  346,    0,    0,    0,    0,    0,  107,  298,    0,  280,
    0,    0,  292,    0,    0,    0,  287,    0,  137,    0,
    0,    0,    0,  132,    0,    0,  276,    0,  122,    0,
  116,  126,  144,  150,  198,    0,  188,    0,    0,    0,
    0,  111,    0,  104,  108,    0,    0,    0,  294,    0,
  295,  284,    0,    0,  278,  288,  259,    0,    0,  118,
  133,  257,    0,  274,    0,  265,  269,  128,    0,    0,
    0,  195,  197,  191,  232,  109,  299,  301,  281,    0,
    0,  293,  290,  136,  134,  148,    0,    0,    0,  145,
  199,  201,  189,    0,    0,    0,  292,    0,  270,  272,
  129,    0,    0,  192,  303,  304,  300,  302,  291,  149,
    0,    0,  205,  204,  203,  200,  202,    0,    0,    0,
  193,  271,  273,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  234,  690,  432,
   12,   13,   53,   22,   23,   24,  323,  194,  237,  675,
  833, 1022, 1141, 1475,  830,  238,  239,  240,  241,  242,
  243,  244,  245,  668,  447,  669,  670,  934,  671,  672,
  938,  831, 1017, 1018, 1019,  268,  590, 1113,  111,  842,
 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
 1215, 1216,  466,  679, 1289,  947, 1120, 1083, 1150, 1174,
 1232, 1300, 1145, 1350, 1327, 1375, 1376, 1377,  949, 1373,
  950,  733, 1266, 1338, 1313, 1363,  515, 1356, 1332, 1392,
  913, 1361, 1364, 1365, 1459, 1393, 1394, 1390, 1217, 1273,
 1244, 1290,  691, 1340, 1439, 1310, 1396, 1468,  467,  269,
  692,  693,  694,  695,  696,  655,  568, 1125,  656,  657,
  848, 1292, 1317, 1407, 1368, 1441, 1293, 1343, 1464, 1488,
 1408, 1409, 1486, 1472, 1473,  945, 1082, 1173, 1229, 1275,
 1230, 1231, 1267, 1324, 1296, 1268,  326,  225, 1372, 1270,
 1357, 1354, 1218, 1246, 1286, 1436, 1398, 1133, 1437,  591,
 1481, 1482, 1285, 1353, 1329, 1385, 1380, 1351, 1417, 1422,
 1383, 1386, 1387, 1467, 1423, 1381, 1382, 1477, 1465, 1466,
  836, 1025, 1080, 1166, 1143, 1182, 1167, 1168, 1193, 1077,
 1164, 1192,  534,  195,  113,  352,  197,  562,  442,  226,
 1305,  653,  654,  819,  835,  327,  409,  533,  305, 1146,
 1147,   46,  115,  306,  117,  118,  119,  120,  121,  122,
  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  137,  254,  796,  986,  511,  720,
  869,  721,  722,  979,  138,  200,  726,  592,  593,  594,
  595,  790,  475,  476,  299,  984,  728,  410,  301,  498,
  499,  500,  501,  504,  735,  312,  750,  751,  886,  265,
  481,  763,  266,  480,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,  152,  599,  153,
  571,  572,  573,  771,  772,  902,  773,  154,  559,  765,
  353, 1000,  548, 1060,  155,  493,  943, 1081, 1171, 1271,
  468, 1151, 1152, 1200, 1201,  820,  551,  338,  768, 1158,
  552,  553,  270,  271,  272,  158,  159,  160,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  172,  285,  577,  173,  174,  319,  801,  632,  916,  845,
  686,  953,  914,  917, 1041,  918,  954,  955,  286,  175,
  176,  177, 1051,  990, 1052, 1053, 1054, 1099, 1055,  178,
  179,  180,  181,  703,  486,  704,  971, 1092,  705,  969,
  706, 1094, 1095,  182,  183,  184,  185,  186,  187,  307,
  524,  525,  992, 1101,  315,  968,  854, 1127,  892, 1134,
  188,  420,  189,  421,  919, 1007,  422,  644,  814,  811,
  812, 1012,  423,  424,  425,  426,  427,  428,  923,  634,
  921, 1106, 1176, 1234, 1009, 1137, 1191,  809,  640,  810,
 1068, 1011, 1069, 1138, 1013,   17,   19,   47,   48,  229,
  658,  827,  443,  659,  660,
  };
  protected static readonly short [] yySindex = {         -202,
    0, -216, -133, -229,   -4,11764,    0,  256,    0,    0,
   -4, -229,    0,    0,   -1,    0, 6742,   -4,    0, -209,
  -27,    0,    0,    0,    0,    0,    0,    0,    0,  226,
    0,  229,    0,    0,    0, 5160,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,  362,    0,    0,
  256,   26,   -4,    0,  173,    0,  -44,  217,  190,11264,
  243, -285,  260, 6899,    0, -285, -285, -285, -148, -285,
 -285,  529,    0,10367, -285, -285,    0,10367,    0,  291,
    0,  190,    0, -285,  301, -285,    0,11783,11783,  333,
 -285, -285, -147,11047,    0,10367,    0,11047,11047,11047,
11047,11047,11047,11047,11047,    0,    1,    0, 8291,    0,
   35,    0,  300,  381,  648, -268,    0,    0,  475,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1026,
  741,  136,  571,  474,  736,  501,  387,  508,  509, -282,
  537,    0,    0,    0,    0,    0,    0, 3526,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  124,  566,  114,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -140, -101,   26,
    0,  355,  565,  596,    0,  523,    0,    0,    0,    0,
 8291, 8291,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  613,  580,    0,  584,    0,  -40,
    0,    0,    0,   26, 6600,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  742,  593,10503,    0,
    0,    0,    0,10367, -285, -285,  738,  316,  648,    0,
  124,    0, 8291,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  683,  215,11264,    0, 8291,10367,
  655,    0,    0,  658,10367,10367, 4728,  388,  228,  677,
 8448,11047,    1,    0,  676,    0,  688, 8291,10367,  693,
  531, -285,    0,10367,  291, 9823,    0,    0,  301,10367,
  301,  249,  417,  778,  124,    0,  566, -268,  794,  124,
10367,10367,10367,  260,    0,  749,    0, 7056,  -86,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4250,
    0,    0,11693,  249,  712,  766,10367,    0,  700,    0,
  237,    0,    0,  335,    0,    0,  730,10503, 9551,    0,
    0,11047, 8431,10367,10367,10367,10367,10367,10367,10367,
10367,10367,10367,11047,11047,11047, 8291, 8291,11047,11047,
11047,11047,11047,11047,11047,11047,11047,11047,11047,11047,
11047,11047,11047,11047,10367,    0,    0,    0,    0,  566,
    0,    0,    0,    0,11783,11783,  124,    0,    0,    0,
    0,  148,  555,    0,    0,    0,    0,    0,    0,    0,
   26,   26,  744,    0,  751,    0,  700,  613,  613,    0,
 -166,    0,  525,  613,  802,    0, -191, 6600,    0,    0,
    0,    0, -172,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  108,12449,    0,    0,    0,
  700,    0,    0,  743,  516,    0,  788,    0,  809,   58,
  291, -285,    0,    0,  124, 7979, -106,    0,  817,    0,
    0,    0,  826,  827,    0,  320,    0,  832,    0,  829,
    0,    0,    0,  540,    0, 8115,  560,10367,  677, 9551,
    0, 7527,    0,  301,    0,    0,    0,  833,  834,    0,
    0,  190,  291,  356,    0, 3932,  835,    0,  836,  124,
    0,  837,    0,    0,    0,10367,  907,    0,    0,    0,
10367,  910,  838,    0,  841,  842,    0,11693,    0,    0,
  -81, 7056,    0,    0,    0,    0,    0,    0,  291,    0,
    0, -264,    0,    0,    0,  301,  249,  124, 8605,    0,
  843,    0,  847,11047,    0,  839, 7056,    0, -303,    0,
  -21,    0,  700,  590,10367,10367,  850,  966,    0,    0,
  -62,  849,    0,    0,    0,  741,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  741,  741,  136,  136,  571,  571,
  571,  571,  474,  474,  736,  501,  387,  508,  509,    0,
  851, -200,    0,10367,  934,  124,  935,  124,  852,10367,
    0,    0,    0,  874,    0,  448,  700,    0,    0,    0,
    0,   15,   91,    0, 8605,  525,    0,  860,  861,    0,
    0,    0,    0,    0,    0,  249,  565,    0,  859,  862,
    0,    0,    0,    0,  864,11837,    0,    0,  341,    0,
    0,  397,    0,10503,    0,  863,    0,    0,    0,  547,
  869,    0,  871,  873,  875,    0,    0,10367,    0,    0,
  124,    0,    0,  872,    0,  884,10367,  965,    0, 6899,
 6899, 8274,    0, 4728,    0,    0, 9959,  193,    0,  -23,
 -130,    0,  831,  840,    0,  -20,    0,    0,  889,    0,
    0,    0,    0,    0,  888,    0,  897,    0, 4409,    0,
  291,    0,    0,  301,  449,  846,    0,  158,    0,  898,
  896,    0, 6899,    0, 6899,    0,10367,    0,10367, 8291,
    0,    0,  291,  899,  291,    0,    0,    0,    0,    0,
    0,    0, 8588, 8291,    0,    0,  124,11693,  929,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9415,    0,    0,    0,    0, 9687,10367,    0, 7684,
  901,    0,    0,  982,    0,  983,    0,  673,    0,  904,
10367,10367,  124,    0,    0,    0,    0,    0,  866,    0,
 -166,    0,    0,    0,    0,  525,  525,    0,  744,  909,
  911,  867,  913,  868,    0,  868,    0, 1031, 1032,    0,
    0,10367,    0,10095,  915,  547, 8605, 8291,    0,  264,
 1036, 1038,  923,  916,    0,10367,10367,  924,10367, 1018,
    0,    0,    0,    0,   99,10231,    0,    0,    0,    0,
 7820,    0, 1044,    0,  566,10367,  936, 8274,  937,    0,
    0,  124,    0,  162,    0,    0,  700,  846,    0,  124,
    0,  916,    0,    0,    0,  930,    0,  961,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  543,    0,    0,
    0, 8448,    0,    0,  124,  931,  901,    0,10367,    0,
10367,    0,10367,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  938,  744,    0,    0,10639,    0,    0,    0,
  939,  940,  868,    0,  868,    0,  868,    0,    0,    0,
    0,  124,  941,  915,    0,    0,    0, -171, -158,  932,
  945,    0,    0,    0,    0,  944, 8274,  901, -200,    0,
  946,    0,    0,  949, 6899,    0,    0,    0,    0,    0,
    0,  942,    0,  677,    0,    0,    0,    0,    0, -196,
    0,  951,  700,  846,    0,  846,  901,    0,    0,  291,
    0,  902,  947,    0,    0,    0,10367,  979,10367,    0,
10367,  978,  262,    0,  862,  269,  583,    0,    0,    0,
    0, -229,    0, 4568,    0,    0,    0,    0,  952,    0,
    0,    0,  120,    0,  953, 1074, 1079,    0,    0,  901,
  964,  901,10367,    0,    0,    0,    0,    0,10367,    0,
  970, -193,    0, -193,    0,    0,    0,    0,  967,  291,
    0,10367, 7684,    0,    0,  993,  796,  968,    0,10367,
    0,  971,    0,    0,10639,   -4,   58,    0,    0,  980,
  973,  973,  973,10095,  975,    0,10367,    0,    0,    0,
    0,  981,  884,    0, 6899,  977,    0,    0, 7056,    0,
  987,    0,    0,  985,    0,10367,    0,    0,    0,    0,
    0,    0,10367,    0,    0,   26,  988,    0, 7544, -154,
 -154, -154,    0,    0,10367,    0, 6899, 6899,    0,    0,
 7056,    0,    0, 6899,    0, 1002,10367,10367,    0,   26,
  989,    0,   26,    0,    0,  990,    0,    0,  943,    0,
 1023,    0,    0,    0,    0,    0,    0, 7056,    0,    0,
 1015,    0,  991, -154,  948,    0,  995,    0, 7544,  999,
  998,    0, 1009, 1010, 1011,10367,    0,    0,    0,    0,
    0, 1012,   26,    0,11343, -150,   26,    0,    0, 1022,
10367, 1005, 1003,  991,    0,    0, 1014,    0,    0, 1016,
    0,    0,12449,    0, 1020, -150,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  251,12449,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1021,   26,
    0, -150,  124,    0, 1022,    0,10367,    0, 1019,11343,
11509,    0,    0,  447,    0,    0,    0,11541,    0,    0,
 1025,    0,    0,    0,    0,    0, 8291, 8291,   64, 8448,
  266,  301, 1046,    0,  249, 9351,    0, 1081,    0,    0,
  991,    0,    0,    0,  991,    0,  976,  984,    0, 8291,
 -152,    0, 8291,    0,  986, 1024,    0,  249,    0, 1027,
  567,    0, 1028,  994,   13,  465, 5160,    0,    0,  991,
    0,  249,    0, 1029, 1030, 1034, 1033,    0, 1037,  984,
 1040,   58, 1035, 1065,    0, 1042, 1073,    0,  700,    0,
  574,    0,    0,    0, 1078,    0, -173,    0, 1063,    0,
    0, 1082,    0, 1084, 1086, 1090,    0, 1076,    0,   58,
   58,    0,   58, 1093, 1094,    0,    0,    0,    0, 1089,
   86,    0, 1099,   58, 1143, 1102,   58,    0,  447,    0,
 8274, 1050, 1101, 1076,    0, 1107, 1108,   90, 1111,    0,
    0,   58,10095, 1064, 1109, 1089,    0,    0,12449,    0,
   26,   26,    0, 1068, 1114, 1099,    0, 1115,    0,10367,
 1075, 1116, 1102,    0, 1119,   58,    0, -185,    0, 1113,
    0,    0,    0,    0,    0,12449,    0,   90,   90, 1128,
 1124,    0, -173,    0,    0,  331, 1129,12449,    0,12449,
    0,    0, 8274, 1117,    0,    0,    0, 1131, 1082,    0,
    0,    0, 1130,    0, -159,    0,    0,    0, -154,  790,
 1135,    0,    0,    0,    0,    0,    0,    0,    0, 1088,
 1138,    0,    0,    0,    0,    0, 1133, 1134, 8274,    0,
    0,    0,    0,   90,  491,  491,    0, -154,    0,    0,
    0, -175, -175,    0,    0,    0,    0,    0,    0,    0,
 9551, 9551,    0,    0,    0,    0,    0, 1139, 1136, 1137,
    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         3011,
    0,    0, 7213, 3011,    0,    0,    0, 1506,    0,    0,
 3164, 1668,    0,    0,    0,    0,    0, 3164,    0,    0,
   43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1510,    0,    0, 1510,    0,    0,
 1506, 3207, 3058,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1144,    0,    0,    0,    0,    0,    0,    0,
    0,11854,    0, 1140,    0,    0,    0, 1140,    0,    0,
    0,    0,    0,    0, -270,    0,    0,    0,    0,    0,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6582,    0,    0,    0,
    0,    0,    0,  142, 4726, 4002,    0,    0, 4567,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4882,
 4950, 5294, 5498, 5838, 6042, 6178, 6314, 6450, 1071, 1353,
 2633,    0,    0,    0,    0,    0,    0,   43,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  178,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  808,  808, 3274,
    0,  461, 1141,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1510,  177,    0,    0,    0,    0,
    0,    0,    0, 3337, -164, 3384,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3613,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1145,    0,    0,    0,
    0,    0, 3613,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2269,    0,
 2671,  284, 2399,    0,    0,    0, 2546, 2399,    0,    0,
    0,    0,    0, 1144,    0,    0,    0,    6,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1142, 1266,    0,    0, 1140,    0, 3613,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -42,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1456,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  150,    0,    0,    0,    0,    0,    0,    0,
 3447, 2829,    0,    0,    0,    0, 2116, 1510, 1510,    0,
 -112,    0, 7701, 1510, 1512,    0,    0,  231,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,11196,    0,    0,    0,
 3613,    0,    0,    0,    0,    0,    0,    0,    0,11585,
    0,    0,    0,    0,    0, 1147,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  550,  804,    0,    0, 1150,
    0,    0,    0,    0,    0,  103,    0,    0, 4090, 1148,
    0,    0,    0,  216,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1820,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1142,    0,    0,
    0,  138,    0,    0,    0,    0,    0,    0, 8745,    0,
    0,    0,    0,    0,    0,   42,  644,    0,    0,    0,
 1149,    0,    0,    0,    0,    0,    0,    0, 3613,    0,
 3613,    0, 4249,    0,    0,    0, -265,    0,    0,    0,
    0,   75,    0,    0,    0, 5054,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5122, 5226, 5362, 5430, 5566, 5634,
 5702, 5770, 5906, 5974, 6110, 6246, 6382, 6518, 1545,    0,
    0,  629,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -179,    0,    0, 2116,    0,    0,    0,
    0, 1097,    0,    0,    0,11908,    0,    0,  642,    0,
    0,    0,    0,    0,    0,  681,  427,    0,    0, 1155,
    0,    0,    0,    0, 1159,    0,    0,    0,    0,    0,
    0,10775,    0,    0,    0,  646,    0,    0,    0,11932,
    0,    0,  667,  678,  691,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1151,    0,    0,    0,    0,
    0,    0,    0, 1161,    0,    0,    0, 3679,    0,    0,
  160,    0,  128, 3772,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1162,    0,    0,    0,    0,    0,
    0,    0,    0, -284,  496,    0,    0,    0,    0,    0,
 1160,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8745,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  250,    0,    0,    0,
 1163,    0,    0,    0,    0,    0,    0,  373,    0,  322,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -112,    0,    0,    0,    0,11932, 7996,    0, 1165,    0,
  601,    0,    0,    0,    0,    0,    0, 1122, 1153,    0,
    0,    0,    0,    0, 1181,11982,    0,    0,    0,11661,
    0,    0,    0,  701,    0, 1182,    0,    0,    0, 1987,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3931,    0, 4408, 1191,    0,    0,
    0, 1189,    0,    0,    0,    0,  392,    0,    0,    0,
    0,  701,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1187,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  735,    0,    0,    0,
    0, 1164,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1190,    0,    0,    0,    0,    0,  753,
  760,    0,    0,    0,    0,    0,    0, 1193,  629,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4090,    0,    0,    0,    0,    0, 1199,
    0,    0,  392,    0,    0,  791, 1193,    0,    0, 8745,
    0,  575,  634,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  180,    0, 1155, 8795,    0,    0,    0,    0,
    0,12013,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  729,    0,  732,    0,    0,    0,    0, 1196,
    0, 1163, 1197,    0,    0,    0,    0,    0,    0,    0,
    0, 1202,    0, 7370,    0,    0,    0,    0,    0, 8745,
    0,    0,    0,    0,    0,    0,  630,  466,    0,    0,
    0,    0,    0,    0,    0,12056,11585,    0,    0,    0,
 -206, -206, -206,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1200,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,12142,    0,    0,    0, 1206,
 1206, 1206,    0,    0,    0,    0,    0,    0,    0,    0,
 -205,    0,    0,    0,    0,    0,    0,    0,    0,12185,
    0,    0,   45,    0,    0, -188,    0,    0,    0,    0,
  499,    0,    0,    0,    0,    0,    0, 1207,    0,    0,
    0,    0, 3121, 1198,    0,    0, 1209,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  545,    0,  236,    0,    0, 8949, 9147,    0,    0,  647,
    0,    0,    0, 2948,    0,    0,    0,    0,    0,  390,
    0,    0,11367,    0,    0, 9048,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11435,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 9241,
    0, 8949,    0,    0,  647,    0,    0,    0,    0,    0,
  363,    0,    0,    0,    0,    0,    0,  363,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1710,  366,    0, 9283,    0,    0,    0, 4856,    0,
 2948,    0,    0,    0, 2948,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  415,    0, 1212,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2948,
    0,  662,    0,  572,    0,    0,    0,    0,    0,    0,
    0,11585,  737,    0,    0,    0,    0,    0, 1146,    0,
  724,    0,    0,    0,    0,    0,    0,    0,  764,    0,
    0,    0,    0,    0,    0,    0,    0, 1204,    0,11585,
11585,    0,11617,    0,    0,    0,    0,    0,    0, 1205,
12409,    0, 1208,11585,10911, 1210,11585,    0,    0,    0,
    0,    0,    0, 1211,    0,    0,    0,12379,    0,    0,
    0,11585,    0,    0,    0, 1213,    0,    0,  337,    0,
12303,12341,    0,    0,    0, 1214,    0,    0,    0,    0,
    0,    0, 1215,    0,    0,11585,    0,  506,    0,  767,
    0,    0,    0,    0,    0,  801,    0,12227,12265,    0,
    0,    0,    0,    0,    0,    0,    0, 1267,    0, 1322,
    0,    0,    0,  773,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  561,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,12379,11083,12099,    0,  561,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1148, 1148,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1537,    0,    0,    0,    4,  -11, -177,  -50, 1540,
    0, 1581, 1589,  286,    0,    0,   -3,    0,    0,    0,
    0,    0,    0, -881, -704, -224, -493,    0,    0,    0,
    0,    0, -199,    0,    0,    0,  661,    0,  769,    0,
    0,    0,    0,  521,  524,  -17, -231,    0,    7,    0,
  368,    0,  396,-1073,-1072, -925, -538, -514, -510, -509,
 -503,    0,-1137,    0,    9,    0,   85,    0,-1086,    0,
    0,    0,  -15,  191,    0,    0,    0,  227,-1056,    0,
 -279, -299,  950,    0,    0,    0, -883,  179,    0,    0,
 -498,    0,    0,  242,    0,    0,  214,    0,    0,  252,
    0, -518, -915,    0,    0,    0,    0,    0,  358,  -13,
    0,    0,  775,  777,  780,  956, -528,    0,    0, -320,
  782,  353,    0, -853,    0,    0,    0,    0,    0,    0,
    0,    0,  159,    0,    0,    0,    0,    0,    0,    0,
    0,  413,    0,    0,    0,    0, -308,  350,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  435,    0, -504,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  187,
    0,    0,  271,    0,    0,  287,  292,  206,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  492,    0,    0,
    0,    0,  -52,    0,   33,   49,    0,    0,  357,    0,
  408,    0,  855,    0, 1154, -292, -272,  -65,  823,    0,
  512,    0,  -38,  -12,    0,    0, 1085,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -263,    0,  370,    0,    0,  -98,    0,
    0,    0,  806,    0, -301, -137,  974,  891,    0,  890,
    0, 1104, 1317, 1004,    0,    0,  709, 1622,    0,    0,
    0,    0,  996,    0,    0,    0,    0,    0, -796, 1362,
    0,    0,    0,    0,    0, 1152,  342,  800,  685,  797,
 1299, 1311, 1312, 1313, 1316,    0, 1310,    0,    0,    0,
    0,  954, 1168, -733,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -294,    0,    0,    0,    0,
 -444,    0,  569,    0,  482,    0,  573,    0,    0,    0,
  625, -533,  -14, -322,   -5,    0, 1572,    0,   25,    0,
   53,   63,   95,  119,  122,  126,  130,  132,  133,  137,
    0, -652,    0,  -22,    0,    0,  765,    0,  694,    0,
    0,    0,  670, -433,  740, -820,    0,  784, -461,    0,
    0,    0,    0,    0,    0,  687,    0,    0,  690,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  698,    0,    0,    0,    0,    0,    0,    0,    0,  -39,
    0, 1218,    0,    0,    0,  853,    0,    0,    0,    0,
    0, -165,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1323,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  513,    0,    0,    0,    0,    0,    0,
    0,    0,  609,    0,    0,    0,    0,    0,    0,   39,
  922,    0,    0,    0,  925,
  };
  protected static readonly short [] yyTable = {           110,
  513,  235,  156,  112,  116,  729,  190,   18,  516,  449,
  489,  157,  431,  734,   44,  555,  193,  473,  769,  318,
  406,  259,  680,  430,  702,  532,  509, 1123, 1002,  543,
  879,  899,  569,  497, 1153, 1154,  469,  261,  310,   14,
  777,  161,  923,  782,  570,  253,  191,  116,  363,  656,
  371,  116,  196,    1,  538,  799,  304,  860,  861, 1048,
  304,  362,  783,  370,  663, 1241,  311,  657,  313,  162,
 1434, 1049,  325,  330, 1049,  294,  913, 1180,  339,  163,
 1483, 1248, 1348,  673, 1032,  251,  231,  354,  360,  651,
  664,  995,  733,  355,  324,  329, 1005, 1034,  733,  336,
  891, 1148,  893, 1307, 1457, 1202,  624,  637,  624,  774,
  350,  164,  637, 1221, 1222,  413,  637,  317,  403,  290,
  196,  196,  665,   16,  783,  870,  823,  291,    2,  334,
  404,  637,  656,  354,  252,  165,  473,  633,  166,  235,
  110,  196,  167,  156,  112,  116,  168,  733,  169,  170,
  657,  775,  157,  171,  413,    2, 1221, 1222,  637,  913,
  656, 1117,  783,  624,  913, 1458,  913,  913,  913,  913,
  913,  913,  913,  913,  913,  913,  347,  637,  657,  408,
  800,   48,  161,  448, 1149,  438,  439,  707,  913, 1435,
  913,   95,  913,   48,  913,  913,  913, 1057,  414, 1058,
 1484,   15,  233,  415,  723,  416,  449, 1349,  192,  727,
  162,  417,  418,  862,  292,  292,  783,  747,  233, 1005,
  163,    3,    4,    5,    6, 1050,  666,  569, 1050,  555,
    6,  472,  469,  196,  196,  874,  477,  414,  446,  570,
  434, 1416,  415,  871,  416,  674, 1033,  479,  259,  913,
  417,  418,  164,  531,  555,  474,  292,  535,  259, 1035,
  570, 1223,  540,  440,  485, 1308, 1061,  478, 1440,  293,
  293,  335,  488,  487,  116,  539,  165,  492,  494,  166,
 1450, 1179, 1451,  167,  445,  557,  766,  168,  419,  169,
  170,  519,  518,  530,  171,  196,  527,  361,  529,  923,
  356,  528,  492,  116, 1223,   48,  199,   20,  817,  794,
 1072,  293, 1238,  688,  545,  546, 1412,  576,  958, 1279,
  818,  196, 1045,  554,  247,  116, 1103,  429,  248,  448,
   20,  537,  556,  196,  561,  824,  542, 1320,  199,  304,
  196, 1378,  558,  348,  867, 1405,  570,  767,  357,  875,
  472,  589, 1460,  876,  874,  598,  600,  601,  602,  603,
  604,  605,  606,  607,  608,  609,  795,  747, 1280,  738,
  434,  613,  614,  680,  474,  474, 1281,   43,  249,  988,
  235, 1480,  196,  923,  676,  196,  448,  631,  677, 1298,
  652,  349,  350, 1299,  233,  972, 1336,  387,  689,  636,
  638,  198,  434,  853,  361,  868,  785,  578,  227,  358,
  228,  361,  313,  361,  350,  361,   55,  738, 1326,  196,
  196,  635,  637,  639, 1366, 1367,  233, 1369,  351,  646,
 1321,  263,  347,  388,  680,  287,  288,  289, 1388,  295,
  296, 1395, 1129,  667,  308,  309,  449,  196,  196,  678,
  497,  314,  473,  316,  233,  320, 1411,  569,  233,  361,
  332,  333,   48,  701,  821,  196,  976,  697, 1039,  570,
  436,  359,  876,  116, 1156, 1157,  649,  650,  738,  196,
 1433, 1159,  661,  505,  369,  648,  292,    6, 1085,  411,
  725,  699,  589,  708,  732,  923,  641,  642,  877,  877,
 1086,  923,  637,  449,  325,  681,  822,  637,  738,  740,
  325,  637,   49,  389,  390,  347,  474,  413,  756,  681,
  292, 1282,  745,  758,  292,  956,  637,  437,  876,  876,
  201,  436,  746,  202, 1040,  348,  754,  554,  570,  116,
  726,  293,  412,  347,  951,  770,  556,  347,  246,  347,
  347,  347,  347,  637, 1442, 1443,   95,  347,  748,  325,
  251,  970,  554, 1040,  116,  909,  681,  789,  789,  723,
 1283,  556,  637,  866,  776,  887,  643,  737,  877,  993,
  196,  702,  359,  349,  359,  872,  359,  359,  437,  359,
  483,  359,  250, 1447,  506,  726,  507,  769,  251,  637,
  414,  196,  983,  315,  960,  415,  350,  416,  876,  252,
 1474,  348,  837,  417,  418,  434,  802, 1132,  262,  516,
  351,  453,  808,  453,  522,  314, 1245,  784,  369,  786,
  264,  787,  233,  359,  635,  359,  838,  636,  359,  349,
  332,  741,  804,  484,  806, 1448,  332,  252, 1224, 1073,
  508,  637,  332,   48,  579,  332,  332,   95,  635,  349,
  901,  636,  350,  839,  580,  901,  472,  901,  510,  332,
  901,  901, 1225,  901,  901,  259, 1226, 1227,  453,  535,
  492,  526,  350, 1228,  727,  635,  317,  196,  636,  858,
  474, 1224, 1204, 1220,  732,  816,  351,  116,  116,  725,
  712,  332,  840,  331,  737, 1021,  349,  855,  196,  841,
  349,  907, 1204,  596,  434, 1225,  907,  359,  907, 1226,
 1227,  907,  907,  882,  907,  907, 1228,  883,  663,  350,
  615,  616,  227,  350,  230,  433, 1220,  360, 1204,  894,
  116,  895,  116,  351,  896,  349,  907,  351,  332,  897,
  901,  770,  581,  361,  888,  901,  663,  502,  903, 1303,
  332,  503,  582,  332,  332,  663,  317,  978,  350, 1096,
  652,  196, 1316,  360,  589,  400,  555,  332,  987,  589,
  911,  337,  732,  904,  951,  337,  521,  332,  115,  435,
  115, 1334,  196,  927,  928,  115,   65,   65,  474,  522,
   65,  907,  317,  474,  903,  360,  196, 1126,  555,  903,
  196,  903,  737,   95,  903,  903,  523,  903,  903,  929,
  435,  884, 1272,  815,  948,  667,  488,  450,   45,  337,
  563,   95,  959,  332,  317,  555,  332,  564,  492,  114,
 1322,  974,  941, 1021,  942, 1155,  680, 1071,  977,  565,
  451,  698,  563,  372,  846,  393,  394,   95,  985,  564,
  732,  196, 1399,  452,  325,  659, 1178,  325,  454,  395,
  396,  565,  268,  455,  659,  456,  457,  458,  459,  196,
  196,  268,  114,  460,  399,  683,  114,  461,  991,  684,
  994,  739,  401,  414,  903,  297,  996,  298,  415,  462,
  416, 1006,  463, 1008,  464, 1010,  417,  418,  402,  715,
  328,  328,  318,  716, 1001,  449,  797,  494,  318, 1020,
  332, 1003,  332,  494, 1452,  319,  405,  658,  465,  724,
  667,  328, 1269,  503,  298,  648,  658,  435, 1140, 1269,
  437,  332,  332,  474,  196,  277,  763,  277,  763,  732,
  763, 1026,  277, 1027, 1074, 1028, 1075, 1254, 1029,  788,
 1471,  332,  116,  684,  391,  392,  196,  516,  910,  332,
   66,  436,  332,  910,   66,  910, 1489, 1490,  910,  910,
  114,  910,  910,  227, 1302,  897,  770,  350,  441, 1064,
  897, 1066,  897, 1067,  441,  897,  897,  470,  897,  897,
  332,  444,  743,  910,  743,  752,  332,  752, 1079,  752,
  471,  943,  332,  943,  334,  600,  332,  600,  251,  754,
  364,  754,  482,  328,  328, 1076,  924,  925,  337,  332,
  490,  488,  337,  491,  332,  337,  155,  337,  155,  365,
  366,  816,  337,  512, 1104,  732,  770,  162,  361,  162,
  332,  332, 1111,  332,  332,   57,  196, 1020,  910,  367,
  163,  332,  163,  517, 1116,  235,  488,  252,  520,  488,
  368,  536,  854,  951,  854,  897,  337,  619,  620,  621,
  622,  474,  116,  574,  554,  328,  116,  541, 1136,  235,
  347,  549, 1165,  556,  347, 1139,  332,  347,  167,  347,
  167,  179,  167,  179,  347,  179,   68,  488,   68,  114,
  120,  328,  120,  350,  116,  116,  554,  682,  116, 1161,
 1067,  116,  185,  328,  185,  556,  384,  385,  386,  156,
  328,  156, 1165,  397,  398, 1203, 1219,  282,  114,  282,
  127,  575,  127,  554,  260,  116,  289,  583,  289, 1108,
 1109,  196,  556, 1461, 1462, 1203,  876,  876, 1190,  685,
  114,  354,  518,  518,  637,  637, 1121, 1122,  647, 1199,
  662,  495,  328, 1235,  411,  328,  411,  495,  260, 1219,
  687, 1203,  260,  260,  260,  260,  260,  260,  260,  260,
  617,  618,  709,  623,  624,  411,  411,  710,  711,  713,
  757,  196,  714,  759,  736,  737,  752,  753,  755,  328,
  328,  760,  761,  762,  781,  411,  778,  196,  779,  488,
  792,  793,  797,  411, 1199,  798,  411,  803,  805,  813,
 1274,  825,  807,  828,  826,  829,  832,  328,  328, 1252,
  849, 1277, 1278,  844,  850,  337,  851,  856,  852,  340,
  341,  342,  343,  344,  345,  346,  347,  857,  859,  198,
  877,  878,  873,  880, 1306,  332,  885, 1309,  890,  889,
  898,  906,  196,  196,  915,  920,  922,  926,  936,  940,
  196,  937, 1323,  930,  939,   43,  944,  946,  952,  196,
  196,  964,  196,  965,  966,  973,  967,  975, 1294,  982,
 1379,  998,  506,  999,  989, 1036, 1004, 1014,  114, 1023,
 1294, 1046,  196,  434, 1024,  196, 1030, 1406, 1037, 1038,
 1044, 1043, 1056, 1294, 1062, 1065,  577, 1063, 1070, 1088,
 1418, 1420, 1084, 1087, 1089, 1090, 1314, 1097, 1102, 1107,
 1112, 1110, 1294,  732, 1124, 1274, 1118, 1119,  328, 1160,
 1314, 1130, 1128, 1132, 1135,  488, 1163, 1406, 1406, 1142,
 1170, 1149, 1177, 1169, 1186, 1181, 1178, 1344, 1183, 1345,
  328,  260, 1428, 1185,  114, 1187, 1188, 1233, 1189, 1194,
 1236,  260, 1284, 1237, 1239, 1297,  260, 1242, 1249, 1240,
 1255,  328, 1276, 1301, 1312, 1328, 1318, 1315, 1389,  114,
 1447, 1302, 1448, 1311, 1330,  732,  373, 1333, 1331,  577,
 1335, 1319, 1341, 1406,  577, 1337,  577,  577,  577,  577,
  577,  577,  577,  577,  577,  577,  577,  374,  375,  376,
  377,  378,  379,  380,  381,  382,  383, 1339,  577, 1342,
  577,  732,  577, 1352,  577,  577,  577, 1321, 1347, 1362,
 1355, 1476, 1476,  337, 1358,  499,  260, 1359, 1485, 1485,
  577, 1360, 1374,  589,  589, 1370, 1371, 1400,  260,  260,
  260,  577, 1384,  260,  260, 1391, 1401,  328, 1403, 1404,
 1410, 1413,  544,  577, 1414, 1424, 1427,  474,  474, 1425,
 1432, 1430, 1429, 1438, 1444, 1445, 1449, 1453,  328,  577,
 1454, 1456, 1463, 1469, 1470,    9, 1491, 1492, 1493,  939,
  531,  931,  489,  601,  670,  828,   32,  490,  332,  448,
  602,  332,  798,  544,   30,   22,  802,  332,  488,   30,
  310,  514,  114,  114,   31,  610,  611,  612,  746,  206,
  544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
  544,  544,  544,  544,  544,  544,  756,  803,   31,  332,
  836,  328,  747,  332,  748,  757,  777,  749,  805,  778,
   96,  807,  658,  658,  680,  114,  314,  114,  339,  123,
  105,  637,  328,  285,  637,  130,  124,  232,  106,  286,
  131,  236,   54,   21, 1015, 1114,  328,  935, 1115, 1251,
  328, 1243, 1415, 1446,  332, 1402, 1431, 1455,  579,  332,
 1397,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332, 1291,  961,  834,  962,  957,  332,  963,
 1304, 1487,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332, 1250,  332,  332,  847, 1325,  332,  332,  332,
  332,  332, 1247, 1479,  332,  332, 1426,  544,  260,  332,
  332,  332,  332,  332,  332,  332,  332,   36, 1421,  328,
  328, 1478, 1419, 1295, 1195,  931,  981, 1346,  332,  749,
 1184,  332,  908,  332,  584,  332,  910,  843,  332,  791,
  865,  579, 1047,  300,  332,  547,  579,  625,  579,  579,
  579,  579,  579,  579,  579,  579,  579,  579,  579,  863,
  626,  499,  627,  630,  628,  764,  499,  499,  629, 1172,
  579, 1256,  579, 1131,  579,  780,  579,  579,  579,  407,
 1175,  905, 1105, 1042,  328, 1091, 1059, 1031, 1098,  499,
 1093,  742,  579, 1100,  997,  645, 1162, 1253,  933,  499,
  932,    0,  499,  499,    0,    0,    0,  499,    0,    0,
  499,    0,  499,    0,  499,  499,  499,  499,    0,    0,
    0,    0,  499,    0,    0,    0,  499,    0,    0,    0,
  499,  579,    0,    0,    0,    0,    0,    0,  499,    0,
    0,  499,    0,  499,  499,    0,    0,  114,  260,  499,
  578,  499,  499,  499,  499,  499,  499,  499,  499,  499,
  499,  499,    0,    0,    0,    0,    0,  499,  499,  830,
    0,    0,  499,  499,    0,  499,  499,  499,  499,  499,
  499,  499,    0,  499,  499,    0,  499,  499,  499,  499,
  499,  499,  499,  499,  499,  499,  328,  499,  499,  499,
  499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
  499,  499,  499,  499,  499,  499,  499,  499,  499,    0,
    0,  499,    0,  499,    0,  499,    0,    0,  499,    0,
    0,    0,    0,  578,  499,    0,    0,    0,  578,    0,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
  578,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  578,    0,  578,    0,  578,  114,  578,  578,
  578,  114,    0,    0,   36,    0,    0,    0,   36,    0,
    0,    0,    0,    0,  578,    0,    0,    0,    0,   36,
    0,  328,    0,    0,   36,  578,    0,    0,   36,  114,
  114,   36,    0,  114,    0,    0,  114,  578,    0,    0,
    0,    0,    0,   36,   36,    0,    0,    0,   36,   36,
  354,    0,    0,  578,   36,    0,   36,   36,   36,   36,
  114,    0,    0,    0,   36,    0,  773,    0,   36,    0,
   36,  328,    0,  354,    0,    0,    0,    0,    0,    0,
   36,    0,   36,   36,    0,   36,  354,  328,    0,   36,
    0,  354,    0,    0,  230,    0,  354,    0,  354,  354,
  354,  354,  544,    0,    0,    0,  354,    0,    0,   36,
  354,    0,    0,    0,  354,   36,   36,    0,    0,    0,
    0,    0,  354,    0,    0,  354,    0,  354,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  328,  328,    0,    0,    0,    0,    0,    0,
  328,  354,    0,    0,    0,  830,  830,    0,    0,  328,
  328,    0,  328,  830,  830,  830,  830,  830,    0,  830,
  830,    0,  830,  830,  830,  830,  830,  830,  830,  830,
    0,    0,  328,    0,  830,  328,  830,  830,  830,  830,
  830,  830,    0,    0,  830,  332,    0,    0,  830,  830,
    0,  830,  830,  830,    0,    0,    0,  354,    0,    0,
    0,    0,    0,  830,    0,  830,    0,  830,  830,    0,
    0,  830,    0,  830,  830,  830,  830,  830,  830,  830,
  830,  830,  830,  830,  830,    0,  830,    0,    0,  830,
  830,    0,    0,  830,  830,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  830,  830,
  830,  830,  830,    0,    0,    0,  830,  830,    0,    0,
  830,    0,    0,    0,    0,  830,  830,  830,  830,  830,
    0,    0,    0,  830,    0,  830,    0,    0,    0,    0,
    0,  830,  830,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  830,  830,  830,  830,
    0,  830,  773,  773,    0,    0,    0,    0,  830,    0,
  773,  773,  773,  773,  773,    0,  773,  773,    0,  773,
  773,  773,  773,  773,  773,  773,    0,    0,  734,    0,
    0,  773,    0,  773,  773,  773,  773,  773,  773,    0,
    0,  773,    0,    0,    0,  773,  773,    0,  773,  773,
  773,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  773,    0,  773,    0,  773,  773,    0,    0,  773,    0,
  773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
  773,  773,    0,  773,    0,    0,  773,  773,    0,    0,
  773,  773,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  773,  773,  773,  773,  773,
    0,    0,    0,  773,  773,    0,    0,  773,    0,    0,
    0,    0,  773,  773,  773,  773,  773,    0,    0,    0,
  773,  332,  773,    0,    0,    0,  332,  332,  773,  773,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  325,  332,
    0,    0,    0,  773,  773,  773,  773,    0,  773,  332,
    0,    0,  332,  332,    0,  773,    0,  332,    0,    0,
  332,    0,  332,    0,  332,  332,  332,  332,    0,    0,
    0,    0,  332,    0,    0,    0,  332,    0,    0,    0,
  332,    0,    0,    0,    0,    0,    0,    0,  332,    0,
    0,  332,    0,  332,  332,    0,    0,    0,    0,  332,
    0,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,    0,    0,    0,    0,  332,  332,    0,
    0,    0,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,    0,  332,  332,    0,    0,  332,  332,  332,
  332,  332,    0,    0,  332,  332,    0,    0,    0,  332,
  332,  332,  332,  332,  332,  332,  332,    0,    0,    0,
    0,    0,    0,    0,  734,    0,    0,    0,  332,  734,
  734,  332,    0,  332,    0,  332,    0,    0,  332,    0,
    0,    0,    0,    0,  332,  362,    0,    0,    0,    0,
    0,    0,  734,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  734,    0,    0,  734,  734,    0,    0,    0,
  734,    0,    0,  734,    0,  734,    0,  734,  734,  734,
  734,    0,    0,    0,    0,  734,    0,    0,    0,  734,
    0,    0,    0,  734,    0,    0,    0,    0,    0,    0,
    0,  734,    0,    0,  734,    0,  734,  734,    0,    0,
    0,    0,  734,    0,  734,  734,  734,  734,  734,  734,
  734,  734,  734,  734,  734,    0,    0,    0,    0,    0,
  734,  734,    0,    0,    0,  734,  734,  734,  734,  734,
  734,    0,  734,  734,  734,    0,  734,  734,    0,    0,
  734,  734,  734,  734,  325,    0,    0,  734,  734,  325,
  325,    0,  734,  734,  734,  734,  734,  734,  734,  734,
  357,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  734,  325,    0,  734,    0,  734,    0,  734,    0,
    0,  734,  325,    0,    0,  325,  325,  734,    0,    0,
  325,    0,    0,  325,    0,  325,    0,  325,  325,  325,
  325,    0,    0,    0,    0,  325,    0,    0,    0,  325,
    0,    0,    0,  325,    0,    0,    0,    0,    0,    0,
    0,  325,    0,    0,  325,    0,  325,  325,    0,    0,
    0,    0,  325,    0,  325,  325,  325,  325,  325,  325,
  325,  325,  325,  325,  325,    0,    0,    0,    0,    0,
  325,  325,    0,    0,    0,  325,  325,  325,  325,  325,
  325,    0,  325,  325,  325,    0,  325,  325,    0,    0,
  325,  325,  325,  325,    0,    0,    0,  325,  325,    0,
    0,    0,  325,  325,  325,  325,  325,  325,  325,  325,
    0,  362,    0,    0,    0,    0,  362,  362,    0,    0,
    0,  325,    0,    0,  325,    0,  325,    0,  325,    0,
    0,  325,    0,    0,    0,    0,    0,  325,   49,  362,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  362,
    0,    0,  362,  362,    0,    0,    0,  362,    0,    0,
  362,    0,  362,    0,  362,  362,  362,  362,    0,    0,
    0,    0,  362,    0,    0,    0,  362,    0,    0,    0,
  362,    0,    0,    0,    0,    0,    0,    0,  362,    0,
    0,  362,    0,  362,  362,    0,    0,    0,  581,  362,
    0,  362,  362,  362,  362,  362,  362,  362,  362,  362,
  362,  362,    0,    0,    0,    0,    0,  362,  362,    0,
    0,    0,  362,  362,    0,  362,  362,  362,    0,  362,
  362,  362,    0,  362,  362,    0,  357,  362,  362,  362,
  362,    0,  357,    0,  362,  362,    0,    0,    0,  362,
  362,  362,  362,  362,  362,  362,  362,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  362,    0,
    0,  362,    0,  362,  357,    0,    0,    0,  357,    0,
    0,  581,    0,    0,  362,    0,  581,    0,  581,  581,
  581,  581,  581,  581,  581,  581,  581,  581,  581,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  581,    0,  581,    0,  581,    0,  581,  581,  581,  357,
   35,    0,    0,    0,  357,    0,  357,  357,  357,  357,
  357,  357,  357,  357,  357,  357,  357,    0,    0,    0,
    0,    0,    0,  357,    0,    0,    0,  357,  357,    0,
  357,  357,  357,    0,  357,  357,  357,    0,  357,  357,
    0,    0,  357,  357,  357,  357,    0,   34,    0,  357,
  357,  581,    0,    0,  357,  357,  357,  357,  357,  357,
  357,  357,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  357,    0,   49,  357,    0,  357,   49,
    0,   49,    0,   49,    0,   49,    0,    0,   49,  357,
   49,   49,    0,   49,    0,   49,    0,   49,    0,   49,
   49,   49,   49,    0,    0,   49,   49,    0,    0,    0,
   28,   49,   49,   49,   49,   49,    0,    0,   49,   49,
   49,    0,   49,    0,   49,   49,   49,   49,   49,   49,
   49,   49,    0,   49,   49,   49,   49,    0,    0,   49,
   49,   49,    0,   49,    0,    0,    0,    0,   49,   49,
    0,   49,   49,   33,   49,   49,   49,    0,    0,    0,
   49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   49,    0,   49,   49,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,   28,   49,    5,    0,   28,    0,
    0,    0,   28,    0,   28,    0,    0,   28,    0,   28,
   28,    0,   28,    0,   28,    0,   28,    0,   28,   28,
   28,   28,    0,    0,   28,   28,    0,    0,    0,    0,
   28,    0,   28,   28,   28,    0,   49,   28,   28,   28,
    0,   28,    0,    0,   28,    0,   28,   28,   28,   28,
    0,    0,    0,   28,   28,   28,    0,   35,   28,   28,
   28,   35,    0,  921,    0,    0,    0,   28,   28,    0,
   28,   28,   35,   28,   28,   28,    0,   35,    0,   28,
    0,   35,    0,    0,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   35,   35,    0,   28,
    0,   35,   35,    0,   34,   28,   28,   35,   34,   35,
   35,   35,   35,    0,   28,    0,    0,   35,    0,   34,
    0,   35,    0,   35,   34,    0,   48,    0,   34,    0,
    0,   34,    0,   35,    0,   35,   35,    0,   35,    0,
    0,    0,   35,   34,   34,    0,    0,    0,   34,   34,
    0,    0,    0,    0,   34,   28,   34,   34,   34,   34,
    0,    0,   35,    0,   34,    0,    0,   28,   34,   35,
   34,   28,    0,    7,    0,    0,    0,    0,    0,    0,
   34,    0,   28,   34,    0,   34,    0,   28,    0,   34,
    0,   28,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,   28,    0,   34,
   33,   28,   28,    0,   33,   34,   34,   28,    0,   28,
   28,   28,   28,    0,    0,   33,    0,   28,    0,    0,
   33,   28,    0,   28,   33,    0,  922,   33,    0,    0,
    0,    0,    0,   28,    0,    0,   28,    0,   28,   33,
   33,    0,   28,    5,   33,   33,    0,   48,    0,    0,
   33,    0,   33,   33,   33,   33,    0,    0,   48,    0,
   33,    0,   28,   48,   33,    0,   33,   48,   28,   28,
   48,    0,    0,    0,    0,    0,   33,    0,    0,   33,
    0,   33,   48,   48,    0,   33,    0,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,   33,    0,   48,    0,   48,
  921,    0,   33,    0,   48,    0,    0,    0,    0,   48,
    0,    0,   48,    0,   48,   48,    0,    0,   48,    0,
   48,    0,    0,    0,   48,    0,    0,   48,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,   48,
   48,    0,    0,    0,   48,   48,    0,    0,    0,    0,
   48,    0,   48,   48,   48,   48,    0,    0,    0,    0,
   48,    0,    0,   48,   48,    0,   48,   48,    0,    0,
    0,    0,    0,    0,    0,    0,   48,    0,   48,   48,
    0,   48,    0,   48,    0,   48,    0,   48,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,   48,    0,   48,    0,   48,   48,    0,
    7,    0,    0,   48,   49,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,   49,    0,   48,    0,   48,
   49,    0,    0,    0,   49,    0,    0,   49,    0,   48,
    0,    0,   48,    0,   48,    0,    0,    0,   48,   49,
   49,    0,    0,    0,   49,   49,    0,    0,    0,    0,
   49,    0,   49,   49,   49,   49,    0,    0,   48,    0,
   49,    0,    0,  922,   49,    0,   49,   48,    0,    0,
    0,    0,    0,    0,    0,    0,   49,    0,   48,   49,
    0,   49,    0,   48,    0,   49,    0,   48,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,   48,    0,   49,    0,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,    0,    0,   48,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
    0,   56,   48,    0,   48,    0,    0,    0,   48,   57,
   25,   58,   26,    0,    0,   27,   59,    0,   60,   61,
   28,   62,   63,   64,   29,    0,    0,    0,   48,    0,
   65,    0,   66,   31,   67,   68,   69,   70,    0,    0,
   33,    0,    0,    0,   71,   34,    0,   72,   73,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   74,
    0,   37,    0,   38,   75,    0,    0,   39,    0,   76,
   77,   78,   79,   80,   81,   40,   41,   82,   83,   42,
   84,    0,   85,    0,    0,   86,   87,    0,  332,   88,
   89,    0,    0,    0,  332,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,   95,    0,    0,    0,   96,    0,    0,    0,
    0,   97,   98,   99,  100,  101,    0,    0,    0,  102,
  332,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  332,    0,    0,    0,    0,    0,
  332,    0,  106,  107,  108,  109,    0,    0,    0,    0,
    0,  332,    0,    0,  198,    0,  332,    0,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
    0,    0,    0,    0,    0,  332,  332,    0,    0,    0,
  332,  332,  332,  332,  332,  332,  332,  332,  332,    0,
  332,  332,    0,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,    0,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,    0,  501,    0,    0,
  332,    0,  332,  501,    0,  332,    0,    0,    0,    0,
    0,  332,    0,    0,    0,    0,  332,    0,    0,  332,
    0,  332,  332,    0,    0,    0,  332,  332,    0,    0,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  501,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  332,  332,    0,    0,    0,    0,    0,    0,  332,    0,
    0,  332,    0,    0,    0,    0,    0,  332,    0,    0,
  501,    0,    0,    0,    0,  501,    0,  501,  501,  501,
  501,  501,  501,  501,  501,  501,  501,  501,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  501,  501,
  501,  501,  501,  501,  501,  501,  501,  501,    0,  501,
  501,    0,  501,  501,  501,  501,  501,  501,  501,  501,
  501,  501,    0,  501,  501,  501,  501,  501,  501,  501,
  501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
  501,  501,  501,  501,  501,    0,  497,  743,    0,    0,
    0,  501,  497,    0,    0,    0,   25,    0,   26,    0,
  501,   27,    0,    0,    0,    0,   28,    0,    0,    0,
   29,    0,    0,    0,    0,    0,    0,    0,    0,   31,
    0,    0,    0,    0,    0,    0,   33,    0,  497,    0,
    0,   34,    0,    0,    0,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,   38,
    0,    0,    0,   39,    0,    0,    0,    0,    0,    0,
    0,   40,   41,  389,    0,   42,    0,    0,  744,  497,
    0,    0,    0,    0,  497,    0,  497,  497,  497,  497,
  497,  497,  497,  497,  497,  497,  497,    0,    0,    0,
    0,    0,    0,    0,  292,    0,    0,  497,  497,  389,
  497,  497,  497,  497,  497,  497,  497,    0,  497,  497,
    0,  497,  497,  497,  497,  497,  497,  497,  497,  497,
  497,    0,  497,  497,  497,  497,  497,  497,  497,  497,
  497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
  497,  497,  497,  497,    0,  505,    0,    0,    0,  322,
  497,  505,    0,  497,    0,    0,    0,    0,    0,  497,
    0,    0,    0,    0,  325,    0,    0,    0,    0,    0,
  325,    0,  389,  389,  389,  389,    0,  389,    0,  389,
  389,    0,  389,  389,  389,  389,  389,  505,  389,  389,
  389,  389,    0,  389,  389,  389,  389,  389,  389,  389,
  389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
  389,  389,  389,  389,  389,    0,    0,    0,    0,  325,
    0,  389,    0,    0,  389,    0,    0,    0,  505,    0,
  389,    0,    0,  505,    0,  505,  505,  505,  505,  505,
  505,  505,  505,  505,  505,  505,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  505,    0,  505,
  505,  505,  505,  505,  505,  505,    0,  505,  505,    0,
  505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
    0,  505,  505,  505,  505,  505,  505,  505,  505,  505,
  505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
  505,  505,  505,    0,  332,  560,    0,    0,    0,  505,
  332,    0,  505,    0,   25,    0,   26,    0,  505,   27,
    0,    0,    0,    0,   28,    0,    0,    0,   29,    0,
    0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,  332,    0,    0,   34,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,    0,    0,
    0,   39,    0,    0,    0,    0,    0,    0,    0,   40,
   41,    0,    0,   42,    0,    0,  321,  332,    0,    0,
    0,    0,  332,    0,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  332,    0,  332,  332,
  332,  332,  332,  332,  332,    0,  332,  332,    0,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,    0,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,    0,  432,  881,    0,    0,  354,  332,  432,
    0,  332,    0,   25,    0,   26,    0,  332,   27,    0,
    0,    0,    0,   28,    0,    0,    0,   29,    0,    0,
    0,    0,    0,    0,    0,    0,   31,    0,    0,    0,
    0,    0,    0,   33,    0,  432,    0,    0,   34,    0,
    0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,    0,    0,    0,
   39,    0,    0,    0,    0,    0,    0,    0,   40,   41,
    0,    0,   42,    0,    0,  321,  432,    0,    0,    0,
    0,  432,    0,  432,  432,  432,  432,  432,  432,  432,
  432,  432,  432,  432,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  432,    0,  432,  432,  432,
  432,  432,  432,  432,    0,  432,  432,    0,  432,  432,
  432,  432,  432,  432,  432,  432,  432,  432,    0,  432,
  432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
  432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
  432,    0,  392, 1078,    0,    0,  354,  432,  392,    0,
  432,    0,   25,    0,   26,    0,  432,   27,    0,    0,
    0,    0,   28,    0,    0,    0,   29,    0,    0,    0,
    0,    0,    0,    0,    0,   31,    0,    0,    0,    0,
    0,    0,   33,    0,  392,    0,    0,   34,    0,    0,
    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,    0,    0,    0,   39,
    0,    0,    0,    0,    0,    0,    0,   40,   41,    0,
    0,   42,    0,    0,  321,  392,    0,    0,    0,    0,
  392,    0,  392,  392,  392,  392,  392,  392,  392,  392,
  392,  392,  392,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  392,    0,  392,  392,  392,  392,
  392,  392,  392,    0,  392,    0,    0,  392,  392,  392,
  392,  392,  392,  392,  392,  392,  392,    0,  392,  392,
  392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
  392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
    0,  536,    0,  495,    0,  354,  392,  536,    0,  392,
    0,   57,   25,    0,   26,  392,    0,   27,  255,    0,
    0,    0,   28,   62,   63,    0,   29,    0,    0,    0,
    0,    0,   65,    0,    0,   31,    0,    0,    0,    0,
    0,    0,   33,  536,    0,    0,    0,   34,    0,   72,
   73,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   75,    0,    0,   39,
    0,    0,   77,    0,   79,    0,   81,   40,   41,  256,
    0,   42,    0,    0,  536,    0,    0,    0,    0,  536,
    0,  536,  536,  536,  536,  536,  536,  536,  536,  536,
  536,  536,    0,    0,    0,    0,   90,   91,   92,  257,
    0,    0,    0,  536,    0,  536,    0,  536,   96,  536,
  536,  536,    0,  536,  536,    0,  536,  536,  536,  536,
  536,  536,  536,  536,  536,  536,  353,    0,    0,  536,
  536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
  536,  536,  536,  536,  536,  536,  536,  548,  536,  353,
    0,    0,    0,  548,  106,  496,    0,    0,    0,    0,
    0,    0,  353,    0,  536,    0,    0,  353,    0,    0,
  229,    0,  353,    0,  353,  353,  353,  353,    0,    0,
    0,    0,  353,    0,    0,    0,  353,    0,    0,  548,
  353,    0,    0,    0,    0,    0,    0,    0,  353,    0,
    0,  353,    0,  353,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  552,    0,    0,    0,    0,
    0,  552,    0,    0,    0,    0,    0,  353,    0,    0,
  548,    0,    0,    0,    0,  548,    0,  548,  548,  548,
  548,  548,  548,  548,  548,  548,  548,  548,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  552,    0,  548,
    0,  548,    0,  548,    0,  548,  548,  548,    0,  548,
  548,    0,    0,  548,  548,  548,  548,  548,  548,  548,
  548,  548,    0,  353,    0,  548,  548,  548,  548,  548,
  548,  548,  548,    0,    0,    0,    0,    0,  552,    0,
    0,    0,    0,  552,  548,  552,  552,  552,  552,  552,
  552,  552,  552,  552,  552,  552,    0,    0,    0,  555,
  548,    0,    0,    0,    0,  555,    0,  552,    0,  552,
    0,  552,    0,  552,  552,  552,    0,  552,  552,    0,
    0,  552,  552,  552,  552,    0,    0,    0,  552,  552,
    0,    0,    0,  552,  552,  552,  552,  552,  552,  552,
  552,  555,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  552,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  553,  552,    0,
    0,    0,    0,  553,    0,    0,    0,    0,    0,    0,
    0,    0,  555,    0,    0,    0,    0,  555,    0,  555,
  555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  553,
    0,  555,    0,  555,    0,  555,    0,  555,  555,  555,
    0,  555,  555,    0,    0,  555,  555,  555,  555,    0,
    0,    0,  555,  555,  203,    0,    0,  555,  555,  555,
  555,  555,  555,  555,  555,    0,    0,    0,    0,    0,
  553,    0,    0,    0,    0,  553,  555,  553,  553,  553,
  553,  553,  553,  553,  553,  553,  553,  553,    0,    0,
    0,  554,  555,    0,    0,    0,  204,  554,    0,  553,
    0,  553,    0,  553,    0,  553,  553,  553,    0,  553,
  553,    0,    0,  553,  553,  553,  553,    0,    0,    0,
  553,  553,    0,    0,    0,  553,  553,  553,  553,  553,
  553,  553,  553,  554,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  553,    0,  205,  206,  207,  208,
    0,  209,  210,  211,  212,  213,  214,  215,  216,  558,
  553,  217,  218,  219,  220,  221,  222,  223,  224,    0,
    0,    0,    0,    0,  554,    0,    0,    0,    0,  554,
    0,  554,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  554,    0,  554,    0,  554,    0,  554,
  554,  554,    0,  554,  554,    0,    0,  554,  554,  554,
  554,    0,    0,    0,  554,  554,    0,  559,    0,  554,
  554,  554,  554,  554,  554,  554,  554,    0,    0,    0,
    0,    0,  558,    0,    0,    0,    0,  558,  554,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
    0,    0,    0,    0,  554,    0,    0,    0,    0,    0,
    0,  558,    0,  558,    0,  558,    0,  558,  558,  558,
    0,    0,    0,    0,    0,  558,  558,  558,  558,    0,
    0,    0,  558,  558,    0,  560,    0,  558,  558,  558,
  558,  558,  558,  558,  558,    0,    0,    0,    0,    0,
  559,    0,    0,    0,    0,  559,  558,  559,  559,  559,
  559,  559,  559,  559,  559,  559,  559,  559,    0,    0,
    0,    0,  558,    0,    0,    0,    0,    0,    0,  559,
    0,  559,    0,  559,    0,  559,  559,  559,    0,    0,
    0,    0,    0,  559,  559,  559,  559,    0,    0,    0,
  559,  559,    0,  561,    0,  559,  559,  559,  559,  559,
  559,  559,  559,    0,    0,    0,    0,    0,  560,    0,
    0,    0,    0,  560,  559,  560,  560,  560,  560,  560,
  560,  560,  560,  560,  560,  560,    0,    0,    0,    0,
  559,    0,    0,    0,    0,    0,    0,  560,    0,  560,
    0,  560,    0,  560,  560,  560,    0,    0,    0,    0,
    0,  560,  560,  560,  560,    0,    0,    0,  560,  560,
    0,  562,    0,  560,  560,  560,  560,  560,  560,  560,
  560,    0,    0,    0,    0,    0,  561,    0,    0,    0,
    0,  561,  560,  561,  561,  561,  561,  561,  561,  561,
  561,  561,  561,  561,    0,    0,    0,    0,  560,    0,
    0,    0,    0,    0,    0,  561,    0,  561,    0,  561,
    0,  561,  561,  561,    0,    0,    0,    0,    0,  561,
  561,  561,  561,    0,    0,    0,  561,  561,    0,  563,
    0,    0,    0,  561,  561,  561,  561,  561,  561,    0,
    0,    0,    0,    0,  562,    0,    0,    0,    0,  562,
  561,  562,  562,  562,  562,  562,  562,  562,  562,  562,
  562,  562,    0,    0,    0,    0,  561,    0,    0,    0,
    0,    0,    0,  562,    0,  562,    0,  562,    0,  562,
  562,  562,    0,    0,    0,    0,    0,  562,  562,  562,
  562,    0,    0,    0,  562,  562,    0,  564,    0,    0,
    0,  562,  562,  562,  562,  562,  562,    0,    0,    0,
    0,    0,  563,    0,    0,    0,    0,  563,  562,  563,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
    0,    0,    0,    0,  562,    0,    0,    0,    0,    0,
    0,  563,    0,  563,    0,  563,    0,  563,  563,  563,
    0,    0,    0,    0,    0,  563,  563,  563,  563,    0,
    0,    0,  563,  563,    0,  565,    0,    0,    0,  563,
  563,  563,  563,  563,  563,    0,    0,    0,    0,    0,
  564,    0,    0,    0,    0,  564,  563,  564,  564,  564,
  564,  564,  564,  564,  564,  564,  564,  564,    0,    0,
    0,    0,  563,    0,    0,    0,    0,    0,    0,  564,
    0,  564,    0,  564,    0,  564,  564,  564,    0,    0,
    0,    0,    0,  564,  564,  564,  564,    0,    0,    0,
  564,  564,    0,  566,    0,    0,    0,  564,  564,  564,
  564,  564,  564,    0,    0,    0,    0,    0,  565,    0,
    0,    0,    0,  565,  564,  565,  565,  565,  565,  565,
  565,  565,  565,  565,  565,  565,    0,    0,    0,    0,
  564,    0,    0,    0,    0,    0,    0,  565,    0,  565,
    0,  565,    0,  565,  565,  565,    0,    0,    0,    0,
    0,  565,  565,  565,  565,    0,    0,    0,  565,  565,
    0,  567,    0,    0,    0,  565,  565,  565,  565,  565,
  565,    0,    0,    0,    0,    0,  566,    0,    0,    0,
    0,  566,  565,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,    0,    0,    0,    0,  565,    0,
    0,    0,    0,    0,    0,  566,    0,  566,    0,  566,
    0,  566,  566,  566,    0,    0,    0,    0,    0,    0,
    0,  566,  566,    0,    0,    0,  566,  566,    0,  568,
    0,    0,    0,    0,    0,  566,  566,  566,  566,    0,
    0,    0,    0,    0,  567,    0,    0,    0,    0,  567,
  566,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,    0,    0,    0,    0,  566,    0,    0,    0,
    0,    0,    0,  567,    0,  567,    0,  567,    0,  567,
  567,  567,    0,    0,    0,    0,    0,    0,    0,  567,
  567,    0,    0,    0,  567,  567,    0,  569,    0,    0,
    0,    0,    0,  567,  567,  567,  567,    0,    0,    0,
    0,    0,  568,    0,    0,    0,    0,  568,  567,  568,
  568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
    0,    0,    0,    0,  567,    0,    0,    0,    0,    0,
    0,  568,    0,  568,    0,  568,    0,  568,  568,  568,
    0,    0,    0,    0,    0,    0,    0,  568,  568,    0,
    0,    0,  568,  568,    0,  570,    0,    0,    0,    0,
    0,  568,  568,  568,  568,    0,    0,    0,    0,    0,
  569,    0,    0,    0,    0,  569,  568,  569,  569,  569,
  569,  569,  569,  569,  569,  569,  569,  569,    0,    0,
    0,    0,  568,    0,    0,    0,    0,    0,    0,  569,
    0,  569,    0,  569,    0,  569,  569,  569,    0,    0,
    0,    0,    0,    0,    0,  569,  569,    0,    0,    0,
  569,  569,    0,  571,    0,    0,    0,    0,    0,    0,
    0,  569,  569,    0,    0,    0,    0,    0,  570,    0,
    0,    0,    0,  570,  569,  570,  570,  570,  570,  570,
  570,  570,  570,  570,  570,  570,    0,    0,    0,    0,
  569,    0,    0,    0,    0,    0,    0,  570,    0,  570,
    0,  570,    0,  570,  570,  570,    0,    0,    0,    0,
    0,    0,    0,  570,  570,    0,    0,    0,  570,  570,
    0,  572,    0,    0,    0,    0,    0,    0,    0,  570,
  570,    0,    0,    0,    0,    0,  571,    0,    0,    0,
    0,  571,  570,  571,  571,  571,  571,  571,  571,  571,
  571,  571,  571,  571,    0,    0,    0,    0,  570,    0,
    0,    0,    0,    0,    0,  571,    0,  571,    0,  571,
    0,  571,  571,  571,    0,    0,    0,    0,    0,    0,
    0,    0,  571,    0,    0,    0,  571,  571,    0,  573,
    0,    0,    0,    0,    0,    0,    0,  571,  571,    0,
    0,    0,    0,    0,  572,    0,    0,    0,    0,  572,
  571,  572,  572,  572,  572,  572,  572,  572,  572,  572,
  572,  572,    0,    0,    0,    0,  571,    0,    0,    0,
    0,    0,    0,  572,    0,  572,    0,  572,    0,  572,
  572,  572,    0,    0,    0,    0,    0,    0,    0,    0,
  572,    0,    0,    0,  572,  572,    0,  574,    0,    0,
    0,    0,    0,    0,    0,  572,  572,    0,    0,    0,
    0,    0,  573,    0,    0,    0,    0,  573,  572,  573,
  573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
    0,    0,    0,    0,  572,    0,    0,    0,    0,    0,
    0,  573,    0,  573,    0,  573,    0,  573,  573,  573,
    0,    0,    0,    0,    0,    0,    0,    0,  573,    0,
    0,    0,    0,  573,    0,  575,    0,    0,    0,    0,
    0,    0,    0,  573,  573,    0,    0,    0,    0,    0,
  574,    0,    0,    0,    0,  574,  573,  574,  574,  574,
  574,  574,  574,  574,  574,  574,  574,  574,    0,    0,
    0,    0,  573,    0,    0,    0,    0,    0,    0,  574,
    0,  574,    0,  574,    0,  574,  574,  574,    0,    0,
    0,    0,    0,    0,    0,    0,  574,    0,    0,    0,
    0,  574,    0,  576,    0,    0,    0,    0,    0,    0,
    0,  574,  574,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0,  575,  574,  575,  575,  575,  575,  575,
  575,  575,  575,  575,  575,  575,    0,    0,    0,    0,
  574,    0,    0,    0,    0,    0,    0,  575,    0,  575,
    0,  575,    0,  575,  575,  575,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  575,
    0,    0,    0,  332,    0,    0,    0,  737,    0,  575,
  575,    0,    0,    0,    0,    0,  576,    0,    0,    0,
  450,  576,  575,  576,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,    0,    0,    0,    0,  575,  332,
    0,    0,    0,  451,    0,  576,    0,  576,    0,  576,
    0,  576,  576,  576,    0,  737,  452,    0,    0,    0,
  453,  454,    0,    0,    0,    0,  455,  576,  456,  457,
  458,  459,    0,    0,    0,    0,  460,  576,  576,    0,
  461,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  576,    0,  462,    0,    0,  463,    0,  464,  332,    0,
    0,    0,    0,    0,  332,    0,  576,    0,    0,    0,
  332,  332,  332,  332,  332,  332,  737,  332,    0,  332,
  332,  465,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,    0,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,    0,    0,   56,    0,  332,
    0,  332,    0,    0,  332,   57,   25,   58,   26,    0,
  332,   27,   59,    0,   60,   61,   28,   62,   63,   64,
   29,    0,    0,    0,    0,    0,   65,    0,   66,   31,
   67,   68,   69,   70,    0,    0,   33,    0,    0,    0,
   71,   34,    0,   72,   73,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   74,    0,   37,    0,   38,
   75,    0,    0,   39,    0,   76,   77,   78,   79,   80,
   81,   40,   41,   82,   83,   42,   84,    0,   85,    0,
    0,   86,   87,    0,    0,   88,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,   93,   94,    0,    0,    0,   95,    0,
    0,    0,   96,    0,    0,    0,    0,   97,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
    0,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,    0,    0,    0,  106,  107,
  108,  109,   57,   25,   58,   26,    0,    0,   27,   59,
    0,   60,   61,   28,   62,   63,   64,   29,    0,    0,
    0,    0,    0,   65,    0,   66,   31,   67,   68,   69,
   70,    0,    0,   33,    0,    0,    0,   71,   34,    0,
   72,   73,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,   37,    0,   38,   75,    0,    0,
   39,    0,   76,   77,   78,   79,   80,   81,   40,   41,
   82,   83,   42,   84,    0,   85,    0,    0,   86,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,   94,    0,    0,    0,   95,    0,    0,    0,   96,
    0,    0,    0,    0,   97,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  550,    0,    0,    0,  106,  107,  108,  109,   57,
   25,   58,   26,    0,    0,   27,   59,    0,   60,   61,
   28,   62,   63,   64,   29,    0,    0,    0,    0,    0,
   65,    0,   66,   31,   67,   68,   69,   70,    0,    0,
   33,    0,    0,    0,   71,   34,    0,   72,   73,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   74,
    0,   37,    0,   38,   75,    0,    0,   39,    0,   76,
   77,   78,   79,   80,   81,   40,   41,   82,   83,   42,
   84,    0,   85,    0,    0,   86,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,   95,    0,    0,    0,   96,    0,    0,    0,
    0,   97,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  918,    0,
    0,    0,  106,  107,  108,  109,  918,  918,  918,  918,
    0,    0,  918,  918,    0,  918,  918,  918,  918,  918,
  918,  918,    0,    0,    0,    0,    0,  918,    0,  918,
  918,  918,  918,  918,  918,    0,    0,  918,    0,    0,
    0,  918,  918,    0,  918,  918,  918,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  918,    0,  918,    0,
  918,  918,    0,    0,  918,    0,  918,  918,  918,  918,
  918,  918,  918,  918,  918,  918,  918,  918,    0,  918,
    0,    0,  918,  918,    0,    0,  918,  918,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  918,  918,  918,  918,  918,    0,    0,    0,  918,
    0,    0,    0,  918,    0,    0,    0,    0,  918,  918,
  918,  918,  918,    0,    0,    0,  918,    0,  918,    0,
    0,    0,    0,    0,  918,  918,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  782,    0,    0,    0,  918,
  918,  918,  918,  782,  782,  782,  782,    0,    0,  782,
  782,    0,  782,  782,  782,  782,  782,  782,  782,    0,
    0,    0,    0,    0,  782,    0,  782,  782,  782,  782,
  782,  782,    0,    0,  782,    0,    0,    0,  782,  782,
    0,  782,  782,  782,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  782,    0,  782,    0,  782,  782,    0,
    0,  782,    0,  782,  782,  782,  782,  782,  782,  782,
  782,  782,  782,  782,  782,    0,  782,    0,    0,  782,
  782,    0,    0,  782,  782,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  782,  782,
  782,  782,  782,    0,    0,    0,  782,    0,    0,    0,
  782,    0,    0,    0,    0,  782,  782,  782,  782,  782,
    0,    0,    0,  782,    0,  782,    0,    0,    0,    0,
    0,  782,  782,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  730,    0,    0,    0,  782,  782,  782,  782,
   57,   25,    0,   26,    0,    0,   27,  255,    0, 1144,
    0,   28,   62,   63,    0,   29,    0,    0,   25,    0,
   26,   65,    0,   27,   31,    0,    0,    0,   28,    0,
    0,   33,   29,    0,    0,    0,   34,    0,   72,   73,
   35,   31,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,   37,   34,   38,   75,    0,   35,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  256,   37,
   42,   38,    0,    0,    0,   39,    0,   87,    0,    0,
   88,   89,    0,   40,   41,    0,    0,   42,    0,    0,
  321,    0,    0,    0,    0,   90,   91,   92,   93,  302,
    0,    0,    0,  512,  731,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  730,
    0,    0,    0,  106,  303,  108,  109,   57,   25,    0,
   26,    0,    0,   27,  255,    0,    0,    0,   28,   62,
   63,  354,   29,    0,    0,  172,    0,  172,   65,    0,
  172,   31,    0,    0,    0,  172,    0,    0,   33,  172,
    0,    0,    0,   34,    0,   72,   73,   35,  172,    0,
    0,    0,    0,    0,    0,  172,    0,    0,    0,   37,
  172,   38,   75,  912,  172,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  256,  172,   42,  172,    0,
    0,    0,  172,    0,   87,    0,    0,   88,   89,    0,
  172,  172,    0,    0,  172,    0,    0,  172,    0,    0,
    0,    0,   90,   91,   92,   93,  302,    0,    0,    0,
  512,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,  942,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  255,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  303,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,  172,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  256,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  302,    0,    0,    0,  717,  980,    0,    0,
   96,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  700,    0,  106,  718,  108,  109,
    0,    0,   57,   25,    0,   26,    0,  719,   27,  255,
    0,    0,    0,   28,   62,   63,    0,   29,    0,    0,
  172,    0,  172,   65,    0,  172,   31,    0,    0,    0,
  172,    0,    0,   33,  172,    0,    0,    0,   34,    0,
   72,   73,   35,  172,    0,    0,    0,    0,    0,    0,
  172,    0,    0,    0,   37,  172,   38,   75,    0,  172,
   39,    0,    0,   77,    0,   79,    0,   81,   40,   41,
  256,  172,   42,  172,    0,   85,    0,  172,    0,   87,
    0,    0,   88,   89,    0,  172,  172,    0,    0,  172,
    0,    0,  172,    0,    0,    0,    0,   90,   91,   92,
   93,  302,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,  942,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,   57,   25,
    0,   26,    0,    0,   27,  255,    0,    0,    0,   28,
   62,   63,    0,   29,    0,  106,  303,  108,  109,   65,
    0,    0,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,  172,   34,    0,   72,   73,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,   38,   75,    0,    0,   39,    0,    0,   77,
    0,   79,    0,   81,   40,   41,  256,    0,   42,    0,
    0,    0,    0,    0,    0,   87,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,   91,   92,   93,  302,    0,    0,
    0,  717,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  730,
    0,  106,  718,  108,  109,    0,    0,   57,   25,    0,
   26,    0,  719,   27,  255,    0,    0,    0,   28,   62,
   63,    0,   29,    0,    0,   25,    0,   26,   65,    0,
   27,   31,    0,    0,    0,   28,    0,    0,   33,   29,
    0,    0,    0,   34,    0,   72,   73,   35,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,   37,
   34,   38,   75,    0,   35,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  256,   37,   42,   38,    0,
    0,    0,   39,    0,   87,    0,    0,   88,   89,    0,
   40,   41,    0,    0,   42,    0,    0,  321,    0,    0,
    0,    0,   90,   91,   92,   93,  302,    0,    0,    0,
  512,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  597,    0,    0,    0,
  106,  303,  108,  109,   57,   25,    0,   26,    0,    0,
   27,  255,    0,    0,    0,   28,   62,   63,  354,   29,
    0,    0,   25,    0,   26,   65,    0,   27,   31,    0,
    0,    0,   28,    0,    0,   33,   29,    0,    0,    0,
   34,    0,   72,   73,   35,   31,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,   37,   34,   38,   75,
    0,   35,   39,    0,    0,   77,    0,   79,    0,   81,
   40,   41,  256,   37,   42,   38,    0,    0,    0,   39,
    0,   87,    0,    0,   88,   89,    0,   40,   41,    0,
    0,   42,    0,    0,  514,    0,    0,    0,    0,   90,
   91,   92,   93,  302,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  900,    0,    0,    0,  106,  303,  108,
  109,   57,   25,    0,   26,    0,    0,   27,  255,    0,
    0,    0,   28,   62,   63,  354,   29,    0,    0,   25,
    0,   26,   65,    0,   27,   31,    0,    0,    0,   28,
    0,    0,   33,   29,    0,    0,    0,   34,    0,   72,
   73,   35,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,   37,   34,   38,   75,    0,   35,   39,
    0,    0,   77,    0,   79,    0,   81,   40,   41,  256,
   37,   42,   38,    0,    0,    0,   39,    0,   87,    0,
    0,   88,   89,    0,   40,   41,    0,    0,   42,    0,
    0,  566,    0,    0,    0,    0,   90,   91,   92,   93,
  302,    0,    0,    0,    0,    0,    0,    0,   96,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  605,    0,    0,    0,  106,  303,  108,  109,  605,  605,
    0,  605,    0,    0,  605,  605,    0,    0,    0,  605,
  605,  605,  354,  605,    0,    0,    0,    0,    0,  605,
    0,    0,  605,    0,    0,    0,    0,    0,    0,  605,
    0,    0,    0,    0,  605,    0,  605,  605,  605,    0,
    0,    0,    0,    0,    0,    0,  332,    0,    0,    0,
  605,    0,  605,  605,    0,    0,  605,    0,    0,  605,
    0,  605,    0,  605,  605,  605,  605,    0,  605,    0,
    0,    0,    0,    0,    0,  605,    0,    0,  605,  605,
    0,    0,  332,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  605,  605,  605,  605,  605,    0,    0,
    0,    0,    0,    0,    0,  605,    0,    0,    0,    0,
    0,  605,  605,  605,  605,    0,    0,    0,  605,    0,
  605,    0,    0,    0,    0,    0,  605,  605,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  605,  605,  605,  605,  332,  332,  332,  332,  737,
    0,    0,  332,  332,    0,    0,  332,  332,  332,  332,
  332,  332,  332,  332,  332,    0,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,    0,   48,
    0,    0,    0,   48,  332,   48,    0,  332,   48,    0,
   48,   48,    0,   48,    0,   48,    0,   48,    0,   48,
   48,   48,   48,    0,    0,   48,   48,    0,    0,    0,
    0,   48,    0,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,   48,   48,   48,    0,    0,   48,
   48,   48,    0,    0,    0,    0,    0,    0,   48,   48,
    0,   48,   48,    0,   48,   48,   48,    0,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
   48,    0,   48,    0,   48,    0,   81,   48,    0,   48,
   48,    0,   48,    0,   48,   48,   48,    0,   48,   48,
   48,   48,    0,    0,   48,   48,    0,    0,    0,    0,
   48,    0,   48,   48,   48,    0,    0,   48,    0,   48,
    0,   48,    0,    0,   48,    0,   48,   48,   48,   48,
    0,    0,    0,   48,   48,   48,   48,    0,   48,   48,
   48,    0,    0,    0,    0,    0,    0,   48,   48,    0,
   48,   48,    0,   48,   48,   48,    0,    0,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   48,    0,   48,
    0,   48,    0,   48,    0,   82,   48,    0,   48,   48,
    0,   48,    0,   48,   48,   48,    0,   48,   48,   48,
   48,    0,    0,   48,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,    0,    0,   48,    0,   48,    0,
   48,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,   48,   48,   48,    0,   48,   48,   48,
    0,    0,    0,    0,    0,    0,   48,   48,    0,   48,
   48,    0,   48,   48,   48,    0,    0,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,    0,    0,    0,   48,    0,   48,   48,    0,
   48,    0,   48,   48,  212,   48,    0,   48,    0,   48,
    0,   48,   48,   48,   48,    0,    0,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,    0,    0,
   48,    0,   48,  332,   48,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,   48,   48,   48,    0,
    0,   48,   48,   48,   48,    0,  332,    0,    0,    0,
   48,   48,    0,   48,   48,    0,   48,   48,   48,  332,
    0,    0,   48,    0,  332,    0,    0,  332,    0,  332,
    0,  332,  332,  332,  332,    0,    0,    0,    0,  332,
    0,    0,   48,  332,    0,    0,    0,  332,  213,    0,
    0,  450,    0,    0,    0,  332,    0,    0,  332,    0,
  332,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  451,    0,    0,    0,    0,  332,
    0,    0,    0,    0,  332,    0,    0,  452,    0,    0,
    0,  332,  454,  263,    0,  332,    0,  455,   48,  456,
  457,  458,  459,    0,    0,    0,    0,  460,  332,    0,
    0,  461,    0,    0,    0, 1287,    0,    0,   57,   25,
    0,   26,    0,  462,   27,  255,  463,    0,  464,   28,
   62,   63,    0,   29,    0,    0,    0,    0,    0,   65,
  332,    0,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,  465,    0,   34,    0,   72,   73,   35,    0,
  585,    0,    0,    0,    0,    0,    0,  586,    0,    0,
   37,    0,   38,   75,    0,    0,   39,    0,    0,   77,
    0,   79,    0,   81,   40,   41,  256,    0,   42,    0,
    0,    0,    0,    0,    0,  587,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0, 1288,    0,
    0,    0,    0,   90,   91,   92,   93,   94,    0,    0,
    0,    0,    0,    0,    0,   96,  907,    0,  588,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,   57,   25,    0,   26,    0,    0,
   27,  255,    0,    0,    0,   28,   62,   63,    0,   29,
    0,  106,  107,  108,  109,   65,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   72,   73,   35,    0,  585,    0,    0,    0,
    0,    0,    0,  586,    0,    0,   37,    0,   38,   75,
    0,    0,   39,    0,    0,   77,    0,   79,    0,   81,
   40,   41,  256,    0,   42,    0,    0,    0,    0,    0,
    0,  587,    0,    0,   88,   89,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
   91,   92,   93,   94,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,  588,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
   57,   25,    0,   26,    0,    0,   27,  255,    0,    0,
    0,   28,   62,   63,    0,   29,    0,  106,  107,  108,
  109,   65,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   72,   73,
   35,    0,  585,    0,    0,    0,    0,    0,    0,  586,
    0,    0,   37,    0,   38,   75,    0,    0,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  256,    0,
   42,    0,    0,    0,    0,    0,    0,  587,    0,    0,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,   57,   25,    0,   26,
    0,    0,   27,  255,    0,    0,    0,   28,   62,   63,
    0,   29,    0,  106,  107,  108,  109,   65,    0,    0,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   72,   73,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   75,    0,    0,   39,    0,    0,   77,    0,   79,
    0,   81,   40,   41,  256,    0,   42,    0,    0,   85,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,  302,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,   57,   25,    0,   26,    0,    0,   27,  255,
    0,    0,    0,   28,   62,   63,    0,   29,    0,  106,
  303,  108,  109,   65,    0,    0,   31,    0,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   72,   73,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   75,    0,    0,
   39,    0,    0,   77,    0,   79,    0,   81,   40,   41,
  256,    0,   42,    0,    0,    0,    0,    0,    0,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,  302,    0,    0,    0,    0,  864,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,   57,   25,
    0,   26,    0,    0,   27,  255,    0,    0,    0,   28,
   62,   63,    0,   29,    0,  106,  303,  108,  109,   65,
    0,    0,   31,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,    0,   34,    0,   72,   73,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   37,    0,   38,   75,    0,    0,   39,    0,    0,   77,
    0,   79,    0,   81,   40,   41,  256,    0,   42,    0,
    0,    0,    0,    0,    0,   87,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,   91,   92,   93,  302,    0,    0,
    0,  512,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,   57,   25,    0,   26,    0,    0,
   27,  255,    0,    0,    0,   28,   62,   63,    0,   29,
    0,  106,  303,  108,  109,   65,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
   34,    0,   72,   73,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   75,
    0,    0,   39,    0,    0,   77,    0,   79,    0,   81,
   40,   41,  256,    0,   42,    0,    0,    0,    0,    0,
    0,   87,    0,    0,   88,   89,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
   91,   92,   93,  302,    0,    0,    0,  506,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
   57,   25,    0,   26,    0,    0,   27,  255,    0,    0,
    0,   28,   62,   63,    0,   29,    0,  106,  303,  108,
  109,   65,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,    0,   34,    0,   72,   73,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   75,    0,    0,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  256,    0,
   42,    0,    0,    0,    0,    0,    0,   87,    0,    0,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,  302,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,   57,   25,    0,   26,
    0,    0,   27,  255,    0,    0,    0,   28,   62,   63,
    0,   29,    0,  106,  303,  108,  109,   65,    0,    0,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   72,   73,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   75,    0,    0,   39,    0,    0,   77,    0,   79,
    0,   81,   40,   41,  256,    0,   42,    0,    0,    0,
    0,    0,    0,   87,    0,    0,   88,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,   91,   92,   93,   94,    0,    0,    0,    0,
    0,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,   57,   25,    0,   26,    0,    0,   27,  255,
    0,    0,    0,   28,   62,   63,    0,   29,    0,  106,
  107,  108,  109,   65,    0,    0,   31,    0,    0,    0,
    0,    0,    0,   33,    0,    0,    0,    0,   34,    0,
   72,   73,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   75,    0,    0,
   39,    0,    0,   77,    0,   79,    0,   81,   40,   41,
  256,    0,   42,    0,    0,    0,    0,    0,    0,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,   94,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,    0,    0,    0,   98,   99,  100,  101,    0,
    0,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,  105,    0,    0,    0,    0,    0,    0,   78,   78,
    0,   78,    0,    0,   78,   78,    0,    0,    0,   78,
   78,   78,    0,   78,    0,  106, 1016,  108,  109,   78,
    0,    0,   78,    0,    0,    0,    0,    0,    0,   78,
    0,    0,    0,    0,   78,    0,   78,   78,   78,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   78,    0,   78,   78,    0,    0,   78,    0,    0,   78,
    0,   78,    0,   78,   78,   78,   78,    0,   78,    0,
    0,    0,    0,    0,    0,   78,    0,    0,   78,   78,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   78,   78,   78,   78,   78,    0,    0,
    0,    0,    0,    0,    0,   78,    0,    0,    0,    0,
    0,   78,   78,   78,   78,    0,    0,    0,   78,    0,
   78,    0,    0,    0,    0,    0,   78,   78,    0,    0,
    0,    0,    0,    0,  135,  135,    0,  135,    0,    0,
  135,  135,    0,    0,    0,  135,  135,  135,    0,  135,
    0,   78,   78,   78,   78,  135,    0,    0,  135,    0,
    0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
  135,    0,  135,  135,  135,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  135,    0,  135,  135,
    0,    0,  135,    0,    0,  135,    0,  135,    0,  135,
  135,  135,  135,    0,  135,    0,    0,    0,    0,    0,
    0,  135,    0,    0,  135,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  135,
  135,  135,  135,  135,    0,    0,    0,    0,    0,    0,
    0,  135,    0,    0,    0,    0,    0,  135,  135,  135,
  135,    0,    0,    0,  135,    0,  135,    0,    0,    0,
    0,    0,  135,  135,    0,    0,    0,    0,    0,    0,
   57,   25,    0,   26,    0,    0,   27,  255,    0,    0,
    0,   28,   62,   63,    0,   29,    0,  135,  135,  135,
  135,   65,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,   28,    0,    0,   34,    0,   72,   73,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   75,   28,    0,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  256,   28,
   42,    0,    0,    0,   28,    0,    0,    0,    0,   28,
    0,   28,   28,   28,   28,    0,    0,   28,    0,   28,
    0,    0,    0,   28,    0,   90,   91,   92,  257,  302,
    0,    0,    0,    0,    0,   28,    0,   96,   28,    0,
   28,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
   28,   28,    0,    0,    0,    0,    0,    0,  638,    0,
  638,    0,  638,  106,  258,  638,  109,  638,  638,    0,
  638,    0,  638,    0,  638,    0,  638,  638,  638,    0,
    0,    0,  638,  638,    0,    0,    0,    0,  638,    0,
  638,  638,    0,    0,    0,  638,    0,    0,    0,  638,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  638,  638,    0,  638,    0,    0,    0,  638,  638,    0,
    0,    0,    0,    0,    0,  638,  638,   57,   25,  638,
   26,    0,  638,   27,  255,    0,    0,  638,   28,   62,
   63,    0,   29,    0,    0,    0,    0,    0,   65,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,  638,
  638,    0,    0,   34,    0,   72,   73,   35,    0,    0,
    0,    0,  638,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   75,    0,    0,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  256,    0,   42,    0,    0,
   85,    0,    0,    0,    0,    0,    0,   25,    0,   26,
    0,    0,   27,  638, 1196,    0,    0,   28,    0,    0,
    0,   29,   90,   91,   92,  257,    0,    0,    0,    0,
   31,  637,    0,  637,   96,    0,  637,   33,  637,  637,
    0,  637,   34,  637, 1197,  637,   35,  637,  637,  637,
    0,    0,    0,  637,  637,    0,    0,    0,   37,  637,
   38,  637,  637,    0,   39, 1198,  637,    0,    0,    0,
  637,    0,   40,   41,    0,    0,   42,    0,    0,  321,
  106,  258,  637,    0,  637,    0,    0,    0,  637,  637,
    0,    0,    0,    0,    0,    0,  637,  637,    0,  637,
  637,  637,    0,  637,  637,    0,  637,  637,  637,  637,
    0,  637,    0,  637,    0,  637,  637,  637,    0,    0,
    0,  637,  637,    0,    0,    0,    0,  637,    0,  637,
  637,    0,    0,    0,  637,    0,    0,    0,  637,    0,
    0,    0,    0,  637,    0,    0,    0,    0,    0,    0,
  637,    0,  637,    0,    0,    0,  637,  637,    0,    0,
  354,    0,    0,    0,  637,  637,    0,    0,  637,    0,
    0,  637,    0,   25,    0,   26,  637,    0,   27,    0,
    0, 1257,    0,   28,  637,  676,    0,   29,    0,  677,
 1258, 1259,    0,    0,    0, 1260,   31,    0,    0,    0,
    0, 1261,    0,   33,    0,   25,    0,   26,   34,    0,
   27,    0,   35, 1257,    0,   28,    0,  676,    0,   29,
    0,  677, 1258, 1259,   37,    0,   38, 1260,   31,    0,
   39,    0,    0, 1261,    0,   33,    0,    0,   40,   41,
   34,    0,   42,    0,   35, 1262,    0,    0,    0,   48,
 1263,   48,  637,    0,   48,    0,   37,    0,   38,   48,
    0,    0,   39,   48,    0,    0,    0,    0,    0,    0,
   40,   41,   48,    0,   42,    0,    0, 1262,    0,   48,
    0,   48, 1263,   48,   48, 1264,   48,    0,   48,    0,
   48,   48,   48,    0,    0,   48,    0,   48,    0,    0,
   48,    0,   48,    0,   48,    0,   48,    0,    0,   48,
    0,   48,    0,    0,   48,   48,   48,    0,   48,    0,
   48,   48,   48,    0,   48,   48, 1265,   48,    0,   48,
   48,    0,   48,    0,   48,   48,    0,    0,   48,   48,
    0,   48,    0,    0,    0,    0,   48,   48,   48,    0,
   48,    0,    0,   48,    0,   48,  153,   25, 1265,   26,
   48,    0,   27,    0,   48,    0,   48,   28,   48,    0,
    0,   29,    0,   48,    0,    0,   48,    0,   48,    0,
   31,    0,   48,    0,    0,   48,  153,   33,    0,    0,
   48,   48,   34,    0,   48,    0,   35,   48,  563,    0,
    0,    0,   48,    0,    0,  564,    0,    0,   37,    0,
   38,    0,    0,    0,   39,    0,    0,  565,    0,    0,
    0,    0,   40,   41,    0,    0,   42,    0,   25,  566,
   26,    0,    0,   27,   48,    0,    0,    0,   28,    0,
    0,    0,   29,    0,    0,    0,   30,   25,    0,   26,
    0,   31,   27,    0,    0,    0,   32,   28,   33,    0,
    0,   29,    0,   34,    0,    0,    0,   35,   36,    0,
   31,    0,    0,    0,    0,    0,    0,   33,   48,   37,
    0,   38,   34,    0,    0,   39,   35,    0,    0,    0,
    0,    0,    0,   40,   41,    0,    0,   42,   37,    0,
   38,   25,    0,   26,   39,    0,   27,    0,    0,    0,
  567,   28,   40,   41,    0,   29,   42,    0,  484,  321,
  484,    0,    0,  484,   31,    0,    0,    0,  484,    0,
    0,   33,  484,    0,    0,    0,   34,    0,    0,    0,
   35,  484,    0,    0,    0,  292,    0,    0,  484,    0,
    0,    0,   37,  484,   38,    0,    0,  484,   39,    0,
    0,    0,    0,    0,    0,    0,   40,   41,    0,  484,
   42,  484,  173,  744,  173,  484,    0,  173,    0,    0,
    0,   43,  173,  484,  484,    0,  173,  484,    0,    0,
  484,    0,    0,    0,    0,  173,  172,    0,  172,    0,
  322,  172,  173,    0,    0,    0,  172,  173,    0,    0,
  172,  173,    0,    0,    0,    0,    0,    0,    0,  172,
    0,    0,    0,  173,    0,  173,  172,    0,    0,  173,
    0,  172,    0,    0,    0,  172,    0,  173,  173,    0,
    0,  173,    0,    0,  173,    0,  182,  172,  182,  172,
    0,  182,    0,  172,  354,    0,  182,    0,    0,    0,
  182,  172,  172,    0,    0,  172,    0,    0,  172,  182,
    0,  484,    0,   35,    0,    0,  182,    0,    0,    0,
    0,  182,    0,    0,   35,  182,    0,    0,    0,   35,
    0,    0,    0,   35,    0,    0,   35,  182,    0,  182,
    0,    0,    0,  182,    0,    0,    0,    0,   35,   35,
    0,  182,  182,   35,   35,  182,   33,    0,  182,   35,
    0,   35,   35,   35,   35,  173,    0,   33,    0,   35,
    0,    0,   33,   35,    0,   35,   33,    0,    0,   33,
    0,    0,    0,    0,    0,   35,    0,   35,   35,  172,
   35,   33,   33,    0,   35,    0,   33,   33,    0,   28,
    0,   28,   33,    0,   33,   33,   33,   33,    0,    0,
    0,    0,   33,    0,   35,    0,   33,    0,   33,    0,
   35,   35,   28,    0,    0,    0,    0,    0,   33,    0,
    0,   33,    0,   33,    0,   28,    0,   33,    0,  182,
   28,    0,   48,    0,    0,   28,    0,   28,   28,   28,
   28,    0,    0,   48,    0,   28,    0,   33,   48,   28,
    0,    0,   48,   33,   33,   48,    0,    0,    0,    0,
    0,   28,    0,    0,   28,    0,   28,   48,   48,    0,
    0,    0,   48,   48,    0,   48,    0,    0,   48,    0,
   48,   48,   48,   48,    0,    0,   48,    0,   48,    0,
   28,   48,   48,    0,   48,   48,   28,   28,   48,    0,
    0,    0,    0,    0,   48,    0,    0,   48,    0,   48,
   48,   48,    0,   48,    0,   48,   48,   48,    0,    0,
    0,   48,    0,   48,   48,   48,   48,    0,    0,    0,
    0,   48,    0,   48,    0,   48,    0,   48,    0,   37,
   48,    0,    0,    0,    0,    0,    0,   48,    0,    0,
   48,    0,   48,   48,    0,   48,   48,    0,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,    0,   48,   48,   48,    0,
    0,    0,   38,    0,    0,    0,    0,    0,    0,   48,
    0,   48,   48,   48,   48,    0,   48,    0,    0,    0,
    0,   48,    0,   48,   48,   48,   48,    0,    0,    0,
    0,   48,    0,    0,    0,   48,   48,    0,   48,    0,
   48,   48,    0,    0,  194,    0,    0,   48,    0,   48,
   48,   48,   48,   48,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,   48,    0,    0,   48,    0,   48,
    0,    0,    0,   48,   48,    0,   48,    0,   48,   48,
    0,    0,  196,    0,    0,   48,    0,   48,   48,   48,
   48,    0,   48,    0,    0,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,    0,   48,    0,    0,
    0,   48,   48,    0,   48,    0,    0,    0,    0,   48,
  296,   48,    0,   48,    0,   48,   48,    0,   48,    0,
   48,    0,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,   48,    0,    0,   48,    0,    0,    0,   48,
    0,    0,   48,    0,    0,   48,    0,    0,  297,  450,
   48,   48,    0,    0,   48,   48,   48,   48,   48,   48,
   48,    0,    0,   48,    0,   48,    0,    0,    0,   48,
    0,    0,  451,    0,    0,    0,    0,    0,    0,    0,
   48,   48,   48,   48,   48,  452,   48,    0,    0,    0,
  454,    0,    0,    0,    0,  455,    0,  456,  457,  458,
  459,    0,    0,    0,    0,  460,    0,    0,    0,  461,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  462,    0,    0,  463,    0,  464,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  465,
  };
  protected static readonly short [] yyCheck = {            17,
  300,   52,   17,   17,   17,  510,   18,    4,  301,  234,
  290,   17,  190,  512,    6,  338,   20,  249,  552,   85,
  158,   60,  467,  189,  486,  320,  299, 1084,  912,  331,
  735,  765,  353,  297, 1121, 1122,  236,   60,   78,  256,
  569,   17,    0,  577,  353,   59,  256,   60,  114,  256,
  116,   64,   20,  256,  327,  256,   74,  710,  711,  256,
   78,  114,  268,  116,  256, 1203,   80,  256,   82,   17,
  256,  268,   88,   89,  268,   69,  256, 1164,   96,   17,
  256, 1219,  256,  256,  256,  371,   48,  372,  357,  256,
  282,  888,  363,  109,   88,   89,  917,  256,  369,   93,
  753,  256,  755,  256,  264,  256,  372,  272,  374,  374,
  414,   17,  277, 1187, 1187,  256,  281,  386,  401,  268,
   88,   89,  314,  257,  428,  256,  655,  276,  358,  277,
  413,  296,  339,  418,  420,   17,  368,  410,   17,  190,
  158,  109,   17,  158,  158,  158,   17,  418,   17,   17,
  339,  416,  158,   17,  256,  358, 1230, 1230,  323,  339,
  367, 1077,  368,  429,  344,  325,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,    0,  342,  367,  173,
  381,  294,  158,  234,  339,  201,  202,  294,  368,  375,
  370,  367,  372,  306,  374,  375,  376,  994,  339,  996,
  376,  418,  369,  344,  506,  346,  431,  381,  418,  509,
  158,  352,  353,  712,  363,  363,  422,  526,  369, 1040,
  158,  424,  425,  426,  427,  422,  418,  548,  422,  552,
    0,  249,  432,  201,  202,  256,  254,  339,  230,  548,
  192, 1379,  344,  374,  346,  418,  418,  263,  287,  429,
  352,  353,  158,  319,  577,  249,  363,  323,  297,  418,
  569, 1187,  328,  225,  287,  418, 1000,  261, 1406,  418,
  418,  419,  290,  289,  287,  328,  158,  295,  296,  158,
 1418, 1163, 1420,  158,  325,  372,  368,  158,  429,  158,
  158,  309,  308,  316,  158,  263,  314,  256,  316,  257,
  266,  315,  320,  316, 1230,  418,   21,  335,  294,  372,
 1015,  418, 1194,  256,  332,  333, 1373,  357,  847,  256,
  306,  289,  975,  338,  369,  338, 1060,  429,  373,  372,
  335,  325,  338,  301,  350,  656,  330,  325,   53,  357,
  308,  256,  429,  343,  368,  256,  655,  429,  314,  370,
  368,  369, 1439,  374,  256,  373,  374,  375,  376,  377,
  378,  379,  380,  381,  382,  383,  429,  676,  305,  266,
  322,  387,  388,  368,  368,  369, 1260,  418,  423,  878,
  431, 1468,  350,  256,  277,  353,  429,  405,  281, 1271,
  441,  391,  414, 1275,  369,  857, 1312,  262,  341,  415,
  416,  429,  354,  698,  363,  429,  428,  359,  371,  375,
  373,  370,  368,  372,  414,  374,  418,  314, 1300,  387,
  388,  415,  416,  417, 1340, 1341,  369, 1343,  428,  433,
  418,   62,  256,  298,  429,   66,   67,   68, 1354,   70,
   71, 1357, 1095,  447,   75,   76,  372,  415,  416,  342,
  714,   82,  684,   84,  369,   86, 1372,  778,  369,  418,
   91,   92,  418,  486,  374,  433,  368,  481,  967,  778,
  368,  256,  374,  486, 1127, 1128,  438,  439,  375,  447,
 1396, 1134,  444,  256,  115,  437,  363,  257,  369,  376,
  508,  485,  510,  487,  512,  368,  349,  350,  349,  350,
  381,  374,  272,  429,  363,  368,  416,  277,  522,  523,
  369,  281,  257,  378,  379,  339,  510,  256,  536,  471,
  363,  256,  526,  541,  363,  846,  296,  368,  349,  350,
  305,  429,  526,  305,  968,  343,  530,  552,  847,  552,
  363,  418,  429,  367,  844,  559,  552,  371,  376,  373,
  374,  375,  376,  323, 1408, 1409,  367,  381,  526,  418,
  371,  856,  577,  997,  577,  797,  429,  585,  586,  871,
  305,  577,  342,  381,  568,  418,  429,  294,  429,  418,
  548, 1043,  367,  391,  369,  723,  371,  372,  429,  374,
  376,  376,  376,  263,  367,  418,  369, 1131,  371,  263,
  339,  569,  875,  368,  341,  344,  414,  346,  429,  420,
 1464,  343,  272,  352,  353,  567,  634,  367,  376,  912,
  428,  372,  640,  374,  269,  256,  376,  579,  259,  581,
  371,  583,  369,  418,  272,  420,  296,  272,  423,  391,
  357,  286,  636,  429,  638,  315,  363,  420, 1187,  381,
  423,  315,  369,  418,  418,  372,  373,  367,  296,  391,
  339,  296,  414,  323,  428,  344,  684,  346,  299,  386,
  349,  350, 1187,  352,  353,  714, 1187, 1187,  429,  745,
  698,  312,  414, 1187,  984,  323,  386,  655,  323,  707,
  684, 1230, 1186, 1187,  712,  647,  428,  710,  711,  717,
  381,  418,  306,  371,  421,  937,  391,  701,  676,  313,
  391,  339, 1206,  372,  666, 1230,  344,  418,  346, 1230,
 1230,  349,  350,  739,  352,  353, 1230,  741,  339,  414,
  389,  390,  371,  414,  373,  381, 1230,  357, 1232,  757,
  753,  759,  755,  428,  760,  391,  374,  428,  357,  763,
  429,  765,  418,  373,  748,  773,  367,  370,  774, 1278,
  369,  374,  428,  372,  373,  376,  386,  866,  414, 1049,
  821,  739, 1291,  357,  792,  389, 1099,  386,  877,  797,
  798,  367,  800,  777, 1084,  371,  256,  373,  374,  373,
  376, 1310,  760,  811,  812,  381,  370,  371,  792,  269,
  374,  429,  386,  797,  339,  357,  774, 1087, 1131,  344,
  778,  346,  421,  367,  349,  350,  286,  352,  353,  813,
  373,  373,  376,  376,  842,  829,  844,  261,    6,  415,
  306,  367,  848,  373,  386, 1158,  376,  313,  856,   17,
  376,  859,  834, 1075,  836, 1125, 1291, 1013,  866,  325,
  284,  482,  306,  379,  308,  382,  383,  367,  876,  313,
  878,  829, 1361,  297,  369,  367,  376,  372,  302,  396,
  397,  325,  367,  307,  376,  309,  310,  311,  312,  847,
  848,  376,   60,  317,  384,  370,   64,  321,  882,  374,
  884,  522,  385,  339,  429,  367,  890,  369,  344,  333,
  346,  919,  336,  921,  338,  923,  352,  353,  400,  370,
   88,   89,  368,  374,  372, 1140,  374,  368,  374,  937,
  371,  915,  373,  374, 1423,  381,  390,  367,  362,  370,
  934,  109, 1241,  374,  369,  887,  376,  373, 1116, 1248,
  418,  392,  393,  937,  912,  374,  372,  376,  374,  967,
  376,  943,  381,  945,  372,  947,  374, 1237,  952,  370,
 1459,  412,  975,  374,  394,  395,  934, 1260,  339,  420,
  370,  376,  423,  344,  374,  346, 1481, 1482,  349,  350,
  158,  352,  353,  371,  418,  339, 1000,  414,  415, 1007,
  344, 1009,  346, 1011,  415,  349,  350,  256,  352,  353,
  357,  418,  374,  374,  376,  372,  363,  374, 1024,  376,
  418,  370,  369,  372,  277,  372,  373,  374,  371,  374,
  373,  376,  340,  201,  202, 1022,  354,  355,  367,  386,
  376, 1049,  371,  376,  373,  374,  370,  376,  372,  392,
  393,  993,  381,  367, 1062, 1063, 1060,  370,  373,  372,
  370,  371, 1070,  373,  374,  375, 1024, 1075,  429,  412,
  370,  418,  372,  376, 1076, 1116, 1084,  420,  376, 1087,
  423,  294,  372, 1373,  374,  429,  415,  393,  394,  395,
  396, 1075, 1095,  372, 1099,  263, 1099,  294, 1106, 1140,
  367,  343, 1143, 1099,  371, 1113,  373,  374,  370,  376,
  372,  370,  374,  372,  381,  374,  372, 1125,  374,  287,
  374,  289,  376,  414, 1127, 1128, 1131,  375, 1131, 1137,
 1138, 1134,  370,  301,  372, 1131,  386,  387,  388,  370,
  308,  372, 1183,  398,  399, 1186, 1187,  374,  316,  376,
  374,  376,  376, 1158,   60, 1158,  374,  418,  376,  354,
  355, 1119, 1158,  364,  365, 1206,  349,  350, 1176,  372,
  338,  418,  372,  373,  364,  365, 1082, 1083,  418, 1185,
  369,  368,  350, 1191,  371,  353,  373,  374,   94, 1230,
  372, 1232,   98,   99,  100,  101,  102,  103,  104,  105,
  391,  392,  376,  397,  398,  392,  393,  372,  372,  368,
  294, 1169,  374,  294,  372,  372,  372,  372,  372,  387,
  388,  374,  372,  372,  376,  412,  374, 1185,  372, 1237,
  371,  256,  374,  420, 1240,  375,  423,  294,  294,  356,
 1244,  372,  381,  375,  374,  374,  373,  415,  416, 1233,
  372, 1257, 1258,  381,  374,   94,  374,  376,  374,   98,
   99,  100,  101,  102,  103,  104,  105,  374,  294,  429,
  372,  374,  423,  367, 1280,    0,  421, 1283,  373,  372,
  372,  343, 1240, 1241,  374,  294,  294,  374,  370,  367,
 1248,  371, 1296,  418,  418,  418,  256,  256,  374, 1257,
 1258,  256, 1260,  256,  372,  372,  381,  280, 1266,  256,
 1351,  372,  367,  343,  368,  374,  376,  370,  486,  371,
 1278,  370, 1280, 1265,  375, 1283,  376, 1368,  374,  376,
  372,  376,  372, 1291,  423,  347,  256,  381,  351,  256,
 1381, 1382,  381,  381,  256,  372, 1288,  368,  372,  347,
  370,  374, 1310, 1361,  370, 1359,  367,  375,  526,  348,
 1302,  375,  372,  367,  370, 1373,  368, 1408, 1409,  372,
  418,  339,  348,  374,  367,  418,  376, 1319,  374, 1321,
  548,  287, 1390,  375,  552,  367,  367,  356,  368,  368,
  376,  297,  337,  381,  371,  305,  302,  368,  368,  374,
  372,  569,  368,  418,  371,  367,  369,  371,  256,  577,
  263,  418,  315,  418,  371, 1423,  381,  371,  376,  339,
  371,  418,  371, 1464,  344,  381,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  373,  368,  367,
  370, 1459,  372,  381,  374,  375,  376,  418,  371,  374,
  369, 1465, 1466,  302,  371,    0,  372,  372, 1472, 1473,
  390,  372,  374, 1481, 1482,  373,  373,  418,  384,  385,
  386,  401,  374,  389,  390,  374,  376,  655,  372,  372,
  370,  418,  331,  413,  376,  418,  372, 1481, 1482,  376,
  372,  376,  418,  381,  367,  372,  368,  381,  676,  429,
  370,  372,  368,  371,  371,    0,  368,  372,  372,    0,
  367,    0,  368,  372,  418,  376,  376,  368,  373,  372,
  372,  256,  376,  372,  370,  367,  376,  262,  368,  368,
  367,  372,  710,  711,  370,  384,  385,  386,  376,  418,
  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  376,  376,  368,  294,
  372,  739,  376,  298,  372,  376,  368,  372,  372,  368,
  418,  372,  367,  376,  368,  753,  368,  755,  367,  376,
  376,  315,  760,  376,  263,  376,  376,   51,  376,  376,
  376,   52,   12,    5,  934, 1075,  774,  829, 1075, 1232,
  778, 1206, 1376, 1413,  339, 1364, 1393, 1429,  256,  344,
 1359,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357, 1266,  850,  676,  850,  846,  363,  850,
 1278, 1473,  367,  368,  369,  370,  371,  372,  373,  374,
  375,  376, 1230,  378,  379,  690, 1297,  382,  383,  384,
  385,  386, 1218, 1467,  389,  390, 1386,  506,  574,  394,
  395,  396,  397,  398,  399,  400,  401,    0, 1382,  847,
  848, 1466, 1381, 1266, 1183,  821,  871, 1321,  413,  526,
 1169,  416,  792,  418,  368,  420,  797,  684,  423,  586,
  717,  339,  984,   72,  429,  334,  344,  399,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  714,
  400,  256,  401,  404,  402,  548,  261,  262,  403, 1151,
  368, 1240,  370, 1099,  372,  574,  374,  375,  376,  158,
 1158,  778, 1063,  969,  912, 1042,  997,  954, 1052,  284,
 1043,  524,  390, 1054,  892,  423, 1138, 1235,  827,  294,
  826,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,  429,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  339,   -1,   -1,  975,  714,  344,
  256,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,  362,  363,    0,
   -1,   -1,  367,  368,   -1,  370,  371,  372,  373,  374,
  375,  376,   -1,  378,  379,   -1,  381,  382,  383,  384,
  385,  386,  387,  388,  389,  390, 1024,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,   -1,
   -1,  416,   -1,  418,   -1,  420,   -1,   -1,  423,   -1,
   -1,   -1,   -1,  339,  429,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372, 1095,  374,  375,
  376, 1099,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,  390,   -1,   -1,   -1,   -1,  272,
   -1, 1119,   -1,   -1,  277,  401,   -1,   -1,  281, 1127,
 1128,  284,   -1, 1131,   -1,   -1, 1134,  413,   -1,   -1,
   -1,   -1,   -1,  296,  297,   -1,   -1,   -1,  301,  302,
  261,   -1,   -1,  429,  307,   -1,  309,  310,  311,  312,
 1158,   -1,   -1,   -1,  317,   -1,    0,   -1,  321,   -1,
  323, 1169,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  335,  336,   -1,  338,  297, 1185,   -1,  342,
   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,  871,   -1,   -1,   -1,  317,   -1,   -1,  362,
  321,   -1,   -1,   -1,  325,  368,  369,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1, 1240, 1241,   -1,   -1,   -1,   -1,   -1,   -1,
 1248,  362,   -1,   -1,   -1,  256,  257,   -1,   -1, 1257,
 1258,   -1, 1260,  264,  265,  266,  267,  268,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,  280,
   -1,   -1, 1280,   -1,  285, 1283,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,    0,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,  418,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,  368,   -1,   -1,
  371,   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  417,  418,  419,  420,
   -1,  422,  256,  257,   -1,   -1,   -1,   -1,  429,   -1,
  264,  265,  266,  267,  268,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,    0,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,
   -1,   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,
  384,  256,  386,   -1,   -1,   -1,  261,  262,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  284,
   -1,   -1,   -1,  417,  418,  419,  420,   -1,  422,  294,
   -1,   -1,  297,  298,   -1,  429,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,  362,  363,   -1,
   -1,   -1,  367,  368,  369,  370,  371,  372,  373,  374,
  375,  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,
  385,  386,   -1,   -1,  389,  390,   -1,   -1,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,  261,
  262,  416,   -1,  418,   -1,  420,   -1,   -1,  423,   -1,
   -1,   -1,   -1,   -1,  429,    0,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  362,  363,   -1,   -1,   -1,  367,  368,  369,  370,  371,
  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,  256,   -1,   -1,  389,  390,  261,
  262,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  413,  284,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,  294,   -1,   -1,  297,  298,  429,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  362,  363,   -1,   -1,   -1,  367,  368,  369,  370,  371,
  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,
   -1,  413,   -1,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,    0,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  339,   -1,   -1,   -1,  256,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,
   -1,   -1,  367,  368,   -1,  370,  371,  372,   -1,  374,
  375,  376,   -1,  378,  379,   -1,  256,  382,  383,  384,
  385,   -1,  262,   -1,  389,  390,   -1,   -1,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,
   -1,  416,   -1,  418,  294,   -1,   -1,   -1,  298,   -1,
   -1,  339,   -1,   -1,  429,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,  339,
    0,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  368,   -1,
  370,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,   -1,    0,   -1,  389,
  390,  429,   -1,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  413,   -1,  257,  416,   -1,  418,  261,
   -1,  263,   -1,  265,   -1,  267,   -1,   -1,  270,  429,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
    0,  293,  294,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,   -1,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,    0,  336,  337,  338,   -1,   -1,   -1,
  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  362,   -1,  364,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  377,    0,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,  418,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,  257,  321,  322,
  323,  261,   -1,    0,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  272,  336,  337,  338,   -1,  277,   -1,  342,
   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,  362,
   -1,  301,  302,   -1,  257,  368,  369,  307,  261,  309,
  310,  311,  312,   -1,  377,   -1,   -1,  317,   -1,  272,
   -1,  321,   -1,  323,  277,   -1,    0,   -1,  281,   -1,
   -1,  284,   -1,  333,   -1,  335,  336,   -1,  338,   -1,
   -1,   -1,  342,  296,  297,   -1,   -1,   -1,  301,  302,
   -1,   -1,   -1,   -1,  307,  418,  309,  310,  311,  312,
   -1,   -1,  362,   -1,  317,   -1,   -1,  257,  321,  369,
  323,  261,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  272,  336,   -1,  338,   -1,  277,   -1,  342,
   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,  362,
  257,  301,  302,   -1,  261,  368,  369,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,   -1,
  277,  321,   -1,  323,  281,   -1,    0,  284,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,
  297,   -1,  342,  257,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,  362,  277,  321,   -1,  323,  281,  368,  369,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,  362,   -1,  321,   -1,  323,
  257,   -1,  369,   -1,  261,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  272,   -1,   -1,  342,   -1,
  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,  257,  321,   -1,  323,  261,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,  272,  336,
   -1,  338,   -1,  277,   -1,  342,   -1,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,   -1,  362,   -1,  301,  302,   -1,
  257,   -1,   -1,  307,  261,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,  272,   -1,  321,   -1,  323,
  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,  342,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  362,   -1,
  317,   -1,   -1,  257,  321,   -1,  323,  261,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,  272,  336,
   -1,  338,   -1,  277,   -1,  342,   -1,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,   -1,  362,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,  256,  336,   -1,  338,   -1,   -1,   -1,  342,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,  362,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,  256,  344,
  345,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,
  298,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  417,  418,  419,  420,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,  429,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
   -1,   -1,   -1,   -1,   -1,  363,  298,   -1,   -1,   -1,
  368,  369,  370,  371,  372,  373,  374,  375,  376,   -1,
  378,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
  388,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,  256,   -1,   -1,
  418,   -1,  420,  262,   -1,  423,   -1,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,  368,   -1,   -1,  371,
   -1,  373,  374,   -1,   -1,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,  386,  387,  388,  389,  390,  298,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,  420,   -1,
   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
  369,  370,  371,  372,  373,  374,  375,  376,   -1,  378,
  379,   -1,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,  256,  256,   -1,   -1,
   -1,  420,  262,   -1,   -1,   -1,  265,   -1,  267,   -1,
  429,  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  262,   -1,  334,   -1,   -1,  337,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  367,  368,  298,
  370,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
   -1,  381,  382,  383,  384,  385,  386,  387,  388,  389,
  390,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,   -1,  256,   -1,   -1,   -1,  418,
  420,  262,   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,
  369,   -1,  371,  372,  373,  374,   -1,  376,   -1,  378,
  379,   -1,  381,  382,  383,  384,  385,  298,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,   -1,   -1,  418,
   -1,  420,   -1,   -1,  423,   -1,   -1,   -1,  339,   -1,
  429,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
  371,  372,  373,  374,  375,  376,   -1,  378,  379,   -1,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,  256,  256,   -1,   -1,   -1,  420,
  262,   -1,  423,   -1,  265,   -1,  267,   -1,  429,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,  379,   -1,  381,
  382,  383,  384,  385,  386,  387,  388,  389,  390,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,  256,  256,   -1,   -1,  418,  420,  262,
   -1,  423,   -1,  265,   -1,  267,   -1,  429,  270,   -1,
   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,  371,  372,
  373,  374,  375,  376,   -1,  378,  379,   -1,  381,  382,
  383,  384,  385,  386,  387,  388,  389,  390,   -1,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,   -1,  256,  256,   -1,   -1,  418,  420,  262,   -1,
  423,   -1,  265,   -1,  267,   -1,  429,  270,   -1,   -1,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,  298,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,   -1,  378,   -1,   -1,  381,  382,  383,
  384,  385,  386,  387,  388,  389,  390,   -1,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
   -1,  256,   -1,  256,   -1,  418,  420,  262,   -1,  423,
   -1,  264,  265,   -1,  267,  429,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  298,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,  371,  374,
  375,  376,   -1,  378,  379,   -1,  381,  382,  383,  384,
  385,  386,  387,  388,  389,  390,  261,   -1,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  256,  413,  284,
   -1,   -1,   -1,  262,  417,  418,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,  429,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,  298,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,  378,
  379,   -1,   -1,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  418,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,  256,
  429,   -1,   -1,   -1,   -1,  262,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,
   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,
   -1,   -1,   -1,  394,  395,  396,  397,  398,  399,  400,
  401,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  429,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,   -1,
   -1,   -1,  389,  390,  285,   -1,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,  256,  429,   -1,   -1,   -1,  327,  262,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,  378,
  379,   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,   -1,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,  377,  378,  379,  380,
   -1,  382,  383,  384,  385,  386,  387,  388,  389,  256,
  429,  392,  393,  394,  395,  396,  397,  398,  399,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,  256,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,  256,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,
   -1,  256,   -1,  394,  395,  396,  397,  398,  399,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,  382,
  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,  256,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,
   -1,  256,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  398,  399,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  385,   -1,   -1,   -1,  389,  390,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,   -1,
   -1,   -1,   -1,  390,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,   -1,
   -1,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,  262,   -1,   -1,   -1,  266,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  261,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,  298,
   -1,   -1,   -1,  284,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,  314,  297,   -1,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,  390,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,  400,  401,   -1,
  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  413,   -1,  333,   -1,   -1,  336,   -1,  338,  357,   -1,
   -1,   -1,   -1,   -1,  363,   -1,  429,   -1,   -1,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,   -1,  378,
  379,  362,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,  256,   -1,  418,
   -1,  420,   -1,   -1,  423,  264,  265,  266,  267,   -1,
  429,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,
  419,  420,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  417,  418,  419,  420,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,
  418,  419,  420,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,  256,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  418,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,  320,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,  372,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  418,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,  368,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  417,  418,  419,  420,
   -1,   -1,  264,  265,   -1,  267,   -1,  428,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,  337,   -1,  322,   -1,  341,
   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,  370,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  417,  418,  419,  420,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  418,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  417,  418,  419,  420,   -1,   -1,  264,  265,   -1,
  267,   -1,  428,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  417,  418,  419,  420,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  418,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,
  420,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  418,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  418,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  417,  418,  419,  420,  371,  372,  373,  374,  375,
   -1,   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,
  386,  387,  388,  389,  390,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,  261,
   -1,   -1,   -1,  265,  420,  267,   -1,  423,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,
  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,
  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,
  362,   -1,  265,   -1,  267,   -1,  368,  270,   -1,  272,
  273,   -1,  275,   -1,  277,  377,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,  418,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  362,
   -1,  265,   -1,  267,   -1,  368,  270,   -1,  272,  273,
   -1,  275,   -1,  277,  377,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,  418,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  265,   -1,  267,  362,   -1,
  270,   -1,  272,  273,  368,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,  261,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,  418,   -1,  284,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  297,
   -1,   -1,  342,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  362,  321,   -1,   -1,   -1,  325,  368,   -1,
   -1,  261,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,  357,
   -1,   -1,   -1,   -1,  362,   -1,   -1,  297,   -1,   -1,
   -1,  369,  302,  371,   -1,  373,   -1,  307,  418,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,  386,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,  264,  265,
   -1,  267,   -1,  333,  270,  271,  336,   -1,  338,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
  418,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,  362,   -1,  300,   -1,  302,  303,  304,   -1,
  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  418,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,  372,   -1,  374,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,   -1,   -1,  374,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,
  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,  368,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  417,  418,  419,  420,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,
  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  417,  418,  419,  420,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  297,
  334,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  371,  336,   -1,
  338,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,   -1,   -1,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,  263,   -1,
  265,   -1,  267,  417,  418,  270,  420,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  264,  265,  334,
  267,   -1,  337,  270,  271,   -1,   -1,  342,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  364,
  365,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,  418,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
  288,  265,   -1,  267,  371,   -1,  270,  295,  272,  273,
   -1,  275,  300,  277,  302,  279,  304,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,  316,  293,
  318,  295,  296,   -1,  322,  323,  300,   -1,   -1,   -1,
  304,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
  417,  418,  316,   -1,  318,   -1,   -1,   -1,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,
  334,  267,   -1,  337,  270,   -1,  272,  273,  342,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,
  418,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,  265,   -1,  267,  342,   -1,  270,   -1,
   -1,  273,   -1,  275,  418,  277,   -1,  279,   -1,  281,
  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,  265,   -1,  267,  300,   -1,
  270,   -1,  304,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  316,   -1,  318,  287,  288,   -1,
  322,   -1,   -1,  293,   -1,  295,   -1,   -1,  330,  331,
  300,   -1,  334,   -1,  304,  337,   -1,   -1,   -1,  265,
  342,  267,  418,   -1,  270,   -1,  316,   -1,  318,  275,
   -1,   -1,  322,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,  288,   -1,  334,   -1,   -1,  337,   -1,  295,
   -1,  265,  342,  267,  300,  377,  270,   -1,  304,   -1,
  306,  275,  308,   -1,   -1,  279,   -1,  313,   -1,   -1,
  316,   -1,  318,   -1,  288,   -1,  322,   -1,   -1,  325,
   -1,  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,
  304,  337,  306,   -1,  308,  265,  418,  267,   -1,  313,
  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,  279,
   -1,  325,   -1,   -1,   -1,   -1,  330,  331,  288,   -1,
  334,   -1,   -1,  337,   -1,  295,  372,  265,  418,  267,
  300,   -1,  270,   -1,  304,   -1,  306,  275,  308,   -1,
   -1,  279,   -1,  313,   -1,   -1,  316,   -1,  318,   -1,
  288,   -1,  322,   -1,   -1,  325,  370,  295,   -1,   -1,
  330,  331,  300,   -1,  334,   -1,  304,  337,  306,   -1,
   -1,   -1,  418,   -1,   -1,  313,   -1,   -1,  316,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,   -1,  265,  337,
  267,   -1,   -1,  270,  418,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,  283,  265,   -1,  267,
   -1,  288,  270,   -1,   -1,   -1,  293,  275,  295,   -1,
   -1,  279,   -1,  300,   -1,   -1,   -1,  304,  305,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  418,  316,
   -1,  318,  300,   -1,   -1,  322,  304,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  316,   -1,
  318,  265,   -1,  267,  322,   -1,  270,   -1,   -1,   -1,
  418,  275,  330,  331,   -1,  279,  334,   -1,  265,  337,
  267,   -1,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,  288,   -1,   -1,   -1,  363,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,   -1,   -1,  304,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  316,
  334,  318,  265,  337,  267,  322,   -1,  270,   -1,   -1,
   -1,  418,  275,  330,  331,   -1,  279,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  288,  265,   -1,  267,   -1,
  418,  270,  295,   -1,   -1,   -1,  275,  300,   -1,   -1,
  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
   -1,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,
   -1,  300,   -1,   -1,   -1,  304,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,  265,  316,  267,  318,
   -1,  270,   -1,  322,  418,   -1,  275,   -1,   -1,   -1,
  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,
   -1,  418,   -1,  261,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,   -1,  272,  304,   -1,   -1,   -1,  277,
   -1,   -1,   -1,  281,   -1,   -1,  284,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,  296,  297,
   -1,  330,  331,  301,  302,  334,  261,   -1,  337,  307,
   -1,  309,  310,  311,  312,  418,   -1,  272,   -1,  317,
   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  335,  336,  418,
  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,  261,
   -1,  263,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,  362,   -1,  321,   -1,  323,   -1,
  368,  369,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,  297,   -1,  342,   -1,  418,
  302,   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  272,   -1,  317,   -1,  362,  277,  321,
   -1,   -1,  281,  368,  369,  284,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,  261,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,
  362,  277,  321,   -1,  323,  281,  368,  369,  284,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  296,  297,   -1,  342,   -1,  301,  302,  261,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,  362,   -1,  321,   -1,  323,   -1,  368,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  297,   -1,  261,  342,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,  362,  321,  284,   -1,
   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,  297,  336,  261,  338,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,  284,   -1,  362,   -1,
  364,  365,   -1,   -1,  368,   -1,   -1,  333,   -1,  297,
  336,  261,  338,  263,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,  284,   -1,  362,   -1,  364,  365,
   -1,   -1,  368,   -1,   -1,  333,   -1,  297,  336,  261,
  338,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,  284,   -1,  362,   -1,   -1,   -1,   -1,  261,
  368,  263,   -1,  333,   -1,  297,  336,   -1,  338,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,  284,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,  362,   -1,   -1,  297,   -1,   -1,  368,  261,
  302,  333,   -1,   -1,  336,  307,  338,  309,  310,  311,
  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  362,  333,  364,  365,  336,  297,  338,   -1,   -1,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  362,
  };

#line 6352 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (module.Evaluator != null && current_container is ModuleContainer){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
	ubag.PushTypeDeclaration (tc);
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;
	ubag.PopTypeDeclaration ();
	
	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == module) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.NamespaceContainer.Module.Compiler.Report)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_namespace = file.NamespaceContainer;
	
	this.module = current_namespace.Module;
	this.compiler = module.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	doc_support = settings.DocumentationFile != null;
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, compiler);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

public UsingsBag UsingsBag {
	get {
		return ubag;
	}
	set {
		ubag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (isAsync, loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (isAsync, loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int GET = 364;
  public const int SET = 365;
  public const int LAST_KEYWORD = 366;
  public const int OPEN_BRACE = 367;
  public const int CLOSE_BRACE = 368;
  public const int OPEN_BRACKET = 369;
  public const int CLOSE_BRACKET = 370;
  public const int OPEN_PARENS = 371;
  public const int CLOSE_PARENS = 372;
  public const int DOT = 373;
  public const int COMMA = 374;
  public const int COLON = 375;
  public const int SEMICOLON = 376;
  public const int TILDE = 377;
  public const int PLUS = 378;
  public const int MINUS = 379;
  public const int BANG = 380;
  public const int ASSIGN = 381;
  public const int OP_LT = 382;
  public const int OP_GT = 383;
  public const int BITWISE_AND = 384;
  public const int BITWISE_OR = 385;
  public const int STAR = 386;
  public const int PERCENT = 387;
  public const int DIV = 388;
  public const int CARRET = 389;
  public const int INTERR = 390;
  public const int DOUBLE_COLON = 391;
  public const int OP_INC = 392;
  public const int OP_DEC = 393;
  public const int OP_SHIFT_LEFT = 394;
  public const int OP_SHIFT_RIGHT = 395;
  public const int OP_LE = 396;
  public const int OP_GE = 397;
  public const int OP_EQ = 398;
  public const int OP_NE = 399;
  public const int OP_AND = 400;
  public const int OP_OR = 401;
  public const int OP_MULT_ASSIGN = 402;
  public const int OP_DIV_ASSIGN = 403;
  public const int OP_MOD_ASSIGN = 404;
  public const int OP_ADD_ASSIGN = 405;
  public const int OP_SUB_ASSIGN = 406;
  public const int OP_SHIFT_LEFT_ASSIGN = 407;
  public const int OP_SHIFT_RIGHT_ASSIGN = 408;
  public const int OP_AND_ASSIGN = 409;
  public const int OP_XOR_ASSIGN = 410;
  public const int OP_OR_ASSIGN = 411;
  public const int OP_PTR = 412;
  public const int OP_COALESCING = 413;
  public const int OP_GENERICS_LT = 414;
  public const int OP_GENERICS_LT_DECL = 415;
  public const int OP_GENERICS_GT = 416;
  public const int LITERAL = 417;
  public const int IDENTIFIER = 418;
  public const int OPEN_PARENS_LAMBDA = 419;
  public const int OPEN_PARENS_CAST = 420;
  public const int GENERIC_DIMENSION = 421;
  public const int DEFAULT_COLON = 422;
  public const int OPEN_BRACKET_EXPR = 423;
  public const int EVAL_STATEMENT_PARSER = 424;
  public const int EVAL_COMPILATION_UNIT_PARSER = 425;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 426;
  public const int DOC_SEE = 427;
  public const int GENERATE_COMPLETION = 428;
  public const int COMPLETE_COMPLETION = 429;
  public const int UMINUS = 430;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
